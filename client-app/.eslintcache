[{"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\App.tsx":"1","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\index.tsx":"2","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\Contexts.tsx":"3","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\reportWebVitals.ts":"4","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Layout.js":"5","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\UserRecipes.tsx":"6","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Home.tsx":"7","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\DisplayRecipe.tsx":"8","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\CreateRecipe.tsx":"9","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Recipes.tsx":"10","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\routes\\ProtectedRoutes.tsx":"11","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\NavBar.tsx":"12","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useUserRecipes.ts":"13","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useWeekmenu.ts":"14","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useTags.ts":"15","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useRecipe.ts":"16","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\utils\\shoppingListGenerator.ts":"17","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useRecipes.ts":"18","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\MiniRecipeCard.tsx":"19","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\DisplayIngredients.tsx":"20","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipePickerModal.tsx":"21","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipeCard.tsx":"22","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Pagination.tsx":"23","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\SearchBar.tsx":"24","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useAuth.tsx":"25","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuLinks.tsx":"26","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\Logo.tsx":"27","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuToggle.tsx":"28","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\NavBarContainer.tsx":"29","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipeListModal.tsx":"30","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuItem.tsx":"31"},{"size":949,"mtime":1611213974233,"results":"32","hashOfConfig":"33"},{"size":793,"mtime":1611214978379,"results":"34","hashOfConfig":"33"},{"size":436,"mtime":1611155155381,"results":"35","hashOfConfig":"33"},{"size":425,"mtime":1611126747107,"results":"36","hashOfConfig":"33"},{"size":440,"mtime":1611214494292,"results":"37","hashOfConfig":"33"},{"size":3838,"mtime":1611210881363,"results":"38","hashOfConfig":"33"},{"size":5844,"mtime":1611211053322,"results":"39","hashOfConfig":"33"},{"size":4346,"mtime":1611211089451,"results":"40","hashOfConfig":"33"},{"size":14473,"mtime":1611211150705,"results":"41","hashOfConfig":"33"},{"size":3889,"mtime":1611210880053,"results":"42","hashOfConfig":"33"},{"size":1045,"mtime":1611213962102,"results":"43","hashOfConfig":"33"},{"size":720,"mtime":1610962168804,"results":"44","hashOfConfig":"33"},{"size":800,"mtime":1610826990891,"results":"45","hashOfConfig":"33"},{"size":4901,"mtime":1610829513256,"results":"46","hashOfConfig":"33"},{"size":528,"mtime":1610095195660,"results":"47","hashOfConfig":"33"},{"size":657,"mtime":1610364023765,"results":"48","hashOfConfig":"33"},{"size":1861,"mtime":1610717715428,"results":"49","hashOfConfig":"33"},{"size":886,"mtime":1610830583770,"results":"50","hashOfConfig":"33"},{"size":4158,"mtime":1610906050247,"results":"51","hashOfConfig":"33"},{"size":1224,"mtime":1611211099293,"results":"52","hashOfConfig":"33"},{"size":3642,"mtime":1610909879502,"results":"53","hashOfConfig":"33"},{"size":2066,"mtime":1610456477566,"results":"54","hashOfConfig":"33"},{"size":1515,"mtime":1610539619875,"results":"55","hashOfConfig":"33"},{"size":7082,"mtime":1611214645392,"results":"56","hashOfConfig":"33"},{"size":172,"mtime":1611210818017,"results":"57","hashOfConfig":"33"},{"size":2545,"mtime":1611214399082,"results":"58","hashOfConfig":"33"},{"size":280,"mtime":1610911632064,"results":"59","hashOfConfig":"33"},{"size":448,"mtime":1610962784112,"results":"60","hashOfConfig":"33"},{"size":648,"mtime":1610963142465,"results":"61","hashOfConfig":"33"},{"size":1261,"mtime":1610882895602,"results":"62","hashOfConfig":"33"},{"size":460,"mtime":1610955310289,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"fxq1k9",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"71","usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":1,"source":"79","usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"84","usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"87","usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"93","usedDeprecatedRules":"66"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"96","usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"99","usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"102","usedDeprecatedRules":"66"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"105","usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"108","usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"111","usedDeprecatedRules":"66"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"114","usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"117","usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"120","usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"123","usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"126","usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"129","usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"132","usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"135","usedDeprecatedRules":"66"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"138","usedDeprecatedRules":"66"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"141","usedDeprecatedRules":"66"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"144","usedDeprecatedRules":"66"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"147","usedDeprecatedRules":"66"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"150","usedDeprecatedRules":"66"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"153","usedDeprecatedRules":"154"},"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\App.tsx",[],["155","156"],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\index.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\Contexts.tsx",["157"],"﻿import React from 'react';\r\nimport { QueryParamProvider } from 'use-query-params';\r\nimport { Route } from 'react-router-dom';\r\nimport { ChakraProvider } from \"@chakra-ui/react\"\r\n\r\nexport const Contexts: React.FC = ({ children }) => {\r\n    return (\r\n        <QueryParamProvider ReactRouterRoute={Route}>\r\n            <ChakraProvider>\r\n                {children}\r\n            </ChakraProvider>\r\n        </QueryParamProvider>\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Layout.js",[],["158","159"],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\UserRecipes.tsx",["160","161","162","163","164"],"﻿import { Spinner, Text, Box, Heading, Button, useToast, HStack, Center, VStack, Table, Thead, Tr, Th, Tbody, Td, Divider, WrapItem, Wrap } from '@chakra-ui/react';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useAuth } from '../hooks/useAuth'\r\nimport { useUserRecipes } from '../hooks/useUserRecipes';\r\nimport { useHistory } from 'react-router';\r\n\r\nexport const UserRecipes = () => {\r\n    const toast = useToast()\r\n    const history = useHistory()\r\n    const { token } = useAuth()\r\n\r\n    const { data, loading, mutate, empty } = useUserRecipes(token)\r\n\r\n    const onDelete = async (id: number, title: string) => {\r\n        const response = await fetch(\"recipe/\" + id, {\r\n            method: \"DELETE\",\r\n            headers: !token ? {} : { 'Authorization': `Bearer ${token}` },\r\n            body: null\r\n        });\r\n        if (response.ok) {\r\n            mutate((recipes) => {\r\n                if (!recipes) {\r\n                    return\r\n                }\r\n                const filteredRecipes = recipes!.filter((recipe) => recipe.id !== id)\r\n                return [...filteredRecipes]\r\n            })\r\n            toast({\r\n                title: \"Recipe Deleted.\",\r\n                description: `Successfully deleted ${title}`,\r\n                status: \"success\",\r\n                duration: 4000,\r\n                isClosable: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Center>\r\n            {loading ?\r\n                <Spinner /> :\r\n                empty ?\r\n                    <VStack spacing={4}>\r\n                        <Heading color=\"grey.500\">You have no recipes..</Heading>\r\n                        <Center><Button color=\"pink.500\" onClick={() => history.push(\"/create-recipes\")}>Create One?</Button></Center>\r\n                    </VStack> :\r\n                    <Table variant=\"simple\">\r\n                        <Thead>\r\n                            <Tr>\r\n                                <Th>Title</Th>\r\n                                <Th>Short description</Th>\r\n                                <Th>Actions</Th>\r\n                            </Tr>\r\n                        </Thead>\r\n                        <Tbody>\r\n                            {data!.map(recipe => (\r\n                                <Tr key={recipe.id}>\r\n                                    <Td>\r\n                                        <Text fontWeight=\"bold\" >\r\n                                            {recipe.title}\r\n                                        </Text>\r\n                                    </Td>\r\n                                    <Td>\r\n                                        <Box maxW={[70, 150]}>\r\n                                            <Text isTruncated>\r\n                                                {recipe.shortDescription}\r\n                                            </Text>\r\n                                        </Box>\r\n                                    </Td>\r\n                                    <Td>\r\n                                        <Wrap>\r\n                                            <WrapItem>\r\n                                                <Button colorScheme=\"yellow\" variant=\"solid\" onClick={() => history.push(`edit/${recipe.id}`)}>Edit</Button>\r\n                                            </WrapItem>\r\n                                            <WrapItem>\r\n                                                <Button colorScheme=\"pink\" variant=\"solid\" onClick={() => onDelete(recipe.id, recipe.title)}>Delete</Button>\r\n                                            </WrapItem>\r\n                                        </Wrap>\r\n\r\n                                    </Td>\r\n                                </Tr>\r\n\r\n                            ))}\r\n                        </Tbody>\r\n                    </Table>\r\n            }\r\n        </Center>\r\n\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Home.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\DisplayRecipe.tsx",["165","166"],"﻿import { Center, Spinner, VStack, Text, Image, Box, Heading, UnorderedList, ListItem, HStack, Badge, Container, color } from '@chakra-ui/react';\r\nimport { TriangleUpIcon, TriangleDownIcon } from '@chakra-ui/icons'\r\nimport React, { useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { useRecipe } from '../hooks/useRecipe';\r\nimport { useAuth } from '../hooks/useAuth'\r\n\r\nexport const DisplayRecipe = () => {\r\n    const { token } = useAuth();\r\n    const { recipeId } = useParams<{ recipeId: string | undefined }>()\r\n    const [loadingVote, setLoadingVote] = useState(false)\r\n    const { data, loading, mutate } = useRecipe(recipeId, token)\r\n\r\n    const onVote = async (vote: number) => {\r\n        setLoadingVote(true)\r\n        const response = await fetch(\"vote/\" + recipeId, {\r\n            method: \"POST\",\r\n            headers: !token ? {} : { \"Content-Type\": \"application/json\", 'Authorization': `Bearer ${token}` },\r\n            body: JSON.stringify({ vote })\r\n        })\r\n\r\n        if (response.ok && await response.json()) {\r\n            mutate(recipe => {\r\n                if (!recipe) {\r\n                    return\r\n                }\r\n                recipe.userVote = vote\r\n                recipe.vote = recipe.vote + vote\r\n                return recipe\r\n            })\r\n        }\r\n\r\n        setLoadingVote(false)\r\n    }\r\n\r\n    return (\r\n        <Center>\r\n            {loading ?\r\n                <Spinner /> :\r\n                !data ?\r\n                    <Center>\r\n                        <Text>Could not find any recipe...</Text>\r\n                    </Center> :\r\n                    <VStack align=\"flex-start\">\r\n                        <Image src={data!.imgUrl} alt={data!.title} width=\"500px\" height=\"300px\" overflow=\"hidden\" objectFit=\"cover\" />\r\n                        <HStack justify=\"space-between\">\r\n                            <Heading>\r\n                                {data!.title}\r\n                            </Heading>\r\n                            <HStack>\r\n                                <TriangleUpIcon\r\n                                    color={data!.userVote === 1 ? \"green.500\" : \"inherit\"}\r\n                                    onClick={() => onVote(1)}\r\n                                    _hover={{ color: \"green.300\", cursor: \"pointer\" }}\r\n                                    disabled={data!.userVote === 1}\r\n                                />\r\n                                <Text>{data!.vote}</Text>\r\n                                <TriangleDownIcon\r\n                                    color={data!.userVote === -1 ? \"red.500\" : \"\"}\r\n                                    onClick={() => onVote(-1)}\r\n                                    _hover={{ color: \"red.300\", cursor: \"pointer\" }}\r\n                                    disabled={data!.userVote === -1}\r\n                                />\r\n                                {loadingVote && < Spinner />}\r\n                            </HStack>\r\n                        </HStack>\r\n                        <Text fontSize=\"xl\">\r\n                            {data!.shortDescription}\r\n                        </Text>\r\n                        <HStack>\r\n                            {data!.tags.map((tag, i) => (\r\n                                <Badge key={i} borderRadius=\"full\" px=\"2\" colorScheme=\"teal\">\r\n                                    {tag.name}\r\n                                </Badge>\r\n                            ))}\r\n                        </HStack>\r\n                        <Box bg=\"gray.300\" borderColor=\"gray.500\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\" p=\"2\">\r\n                            <UnorderedList>\r\n                                {data!.ingredients.map(ingredient => (\r\n                                    <ListItem key={ingredient.name}>\r\n                                        {`${ingredient.name}: ${ingredient.amount} ${ingredient.suffix}`}\r\n                                    </ListItem>\r\n                                ))}\r\n                            </UnorderedList>\r\n                        </Box>\r\n                        <Container pl=\"0\" pr=\"0\">\r\n                            <Text>\r\n                                {data!.description}\r\n                            </Text>\r\n                        </Container>\r\n                    </VStack>\r\n            }\r\n        </Center>\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\CreateRecipe.tsx",["167"],"﻿import { Button, FormControl, FormErrorMessage, FormLabel, Input, Select, HStack, Textarea, Tag, TagLabel, TagCloseButton, Box, Stack, Grid, GridItem, useToast } from '@chakra-ui/react';\r\nimport { Field, FieldArray, FieldProps, Form, Formik, FormikProps } from 'formik';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport * as Yup from 'yup';\r\nimport { useRecipe } from '../hooks/useRecipe';\r\nimport { useTags } from '../hooks/useTags';\r\nimport { useUserRecipes } from '../hooks/useUserRecipes';\r\nimport { Ingredients, Recipe } from \"../types\";\r\nimport { useAuth } from '../hooks/useAuth'\r\n\r\ninterface FormValues {\r\n    title: string;\r\n    shortDescription: string;\r\n    description: string;\r\n    tags: string[]\r\n    ingredients: Ingredients[]\r\n    imgUrl: string\r\n}\r\n\r\nconst suffix = [\"pcs\", \"kg\", \"g\", \"ts\", \"L\", \"dL\"]\r\n\r\nexport const CreateRecipe = () => {\r\n    const [initialValues, setInitialValues] = useState<FormValues>({ title: \"\", shortDescription: \"\", description: \"\", tags: [], ingredients: [], imgUrl: \"\" })\r\n    const { recipeId } = useParams<{ recipeId: string | undefined }>()\r\n    const toast = useToast()\r\n    const history = useHistory()\r\n\r\n    const { token } = useAuth()\r\n    const { data, empty, loading } = useTags();\r\n    const { data: recipeData, loading: recipeLoading } = useRecipe(recipeId, token);\r\n    const { mutate } = useUserRecipes(token)\r\n\r\n    useEffect(() => {\r\n        if (!recipeLoading && recipeData) {\r\n            setInitialValues({\r\n                title: recipeData.title,\r\n                shortDescription: recipeData.shortDescription,\r\n                description: recipeData.description,\r\n                tags: Object.values(recipeData.tags).map(tag => tag.name),\r\n                ingredients: recipeData.ingredients,\r\n                imgUrl: recipeData.imgUrl\r\n            })\r\n        }\r\n    }, [recipeLoading, recipeData])\r\n\r\n    const SignupSchema = Yup.object().shape({\r\n        title: Yup.string()\r\n            .min(2, 'Too Short!')\r\n            .max(50, 'Too Long!')\r\n            .required('Required'),\r\n        shortDescription: Yup.string()\r\n            .min(2, 'Too Short!')\r\n            .max(120, 'Too Long!')\r\n            .required('Required'),\r\n        description: Yup.string()\r\n            .min(2, 'Too Short!')\r\n            .max(500, 'Too Long!')\r\n            .required('Required'),\r\n        imgUrl: Yup.string()\r\n            .max(200, 'Too Long!')\r\n    });\r\n\r\n    return (\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={initialValues}\r\n            onSubmit={async (values, actions) => {\r\n                console.log(values);\r\n                const response = await fetch(recipeId ? \"recipe/\" + recipeId : \"recipe\", {\r\n                    method: recipeId ? \"PUT\" : \"POST\",\r\n                    headers: !token ? { \"Content-Type\": \"application/json\" } : { \"Content-Type\": \"application/json\", 'Authorization': `Bearer ${token}` },\r\n                    body: JSON.stringify(values)\r\n                });\r\n\r\n                if (response.ok) {\r\n                    toast({\r\n                        title: recipeId ? \"Recipe updated.\" : \"Recipe created\",\r\n                        description: recipeId ? \"Your recipe was successfully updated\" : \"Your recipe was successfully created\",\r\n                        status: \"success\",\r\n                        duration: 4000,\r\n                        isClosable: true,\r\n                    })\r\n\r\n                    const recipeResponse = await response.json() as Recipe\r\n\r\n                    mutate(userRecipes => {\r\n                        if (!userRecipes) {\r\n                            return\r\n                        }\r\n                        if (recipeId) {\r\n                            const filteredRecipes = userRecipes!.filter((recipe) => recipe.id.toString() !== recipeId)\r\n                            return [...filteredRecipes, recipeResponse]\r\n                        } else {\r\n                            return [...userRecipes, recipeResponse]\r\n                        }\r\n                    })\r\n\r\n                    history.push(\"/my-recipes\")\r\n                } else {\r\n                    toast({\r\n                        title: \"Error\",\r\n                        description: recipeId ? \"Your recipe was not updated\" : \"Your recipe was not created\",\r\n                        status: \"error\",\r\n                        duration: 4000,\r\n                        isClosable: true,\r\n                    })\r\n                }\r\n            }}\r\n            validationSchema={SignupSchema}\r\n        >\r\n            {(props: FormikProps<FormValues>) => {\r\n                const {\r\n                    values,\r\n                    isSubmitting,\r\n                } = props\r\n                return (\r\n                    <Form>\r\n                        <Field name=\"title\">\r\n                            {({ form, field }: FieldProps) => (\r\n                                <FormControl isInvalid={!!form.errors?.title && !!form.touched?.title}>\r\n                                    <FormLabel htmlFor=\"title\">Title</FormLabel>\r\n                                    <Input {...field} id=\"title\" placeholder=\"title\" />\r\n                                    <FormErrorMessage>{form.errors.title}</FormErrorMessage>\r\n                                </FormControl>\r\n                            )}\r\n                        </Field>\r\n                        <Field name=\"shortDescription\">\r\n                            {({ form, field }: FieldProps) => (\r\n                                <FormControl isInvalid={!!form.errors?.shortDescription && !!form.touched?.shortDescription}>\r\n                                    <FormLabel htmlFor=\"shortDescription\">Short Description</FormLabel>\r\n                                    <Textarea {...field} id=\"shortDescription\" placeholder=\"Short Description\" />\r\n                                    <FormErrorMessage>{form.errors.shortDescription}</FormErrorMessage>\r\n                                </FormControl>\r\n                            )}\r\n                        </Field>\r\n                        <Field name=\"description\">\r\n                            {({ form, field }: FieldProps) => (\r\n                                <FormControl isInvalid={!!form.errors?.description && !!form.touched?.description}>\r\n                                    <FormLabel htmlFor=\"description\">Description</FormLabel>\r\n                                    <Textarea {...field} id=\"description\" placeholder=\"Description\" />\r\n                                    <FormErrorMessage>{form.errors.description}</FormErrorMessage>\r\n                                </FormControl>\r\n                            )}\r\n                        </Field>\r\n                        <Field name=\"imgUrl\">\r\n                            {({ form, field }: FieldProps) => (\r\n                                <FormControl isInvalid={!!form.errors?.imgUrl && !!form.touched?.imgUrl}>\r\n                                    <FormLabel htmlFor=\"imgUrl\">ImageUrl</FormLabel>\r\n                                    <Input {...field} id=\"imgUrl\" placeholder=\"imgUrl\" />\r\n                                    <FormErrorMessage>{form.errors.imgUrl}</FormErrorMessage>\r\n                                </FormControl>\r\n                            )}\r\n                        </Field>\r\n                        <FormLabel htmlFor={`tags`} pt={1}>Tags</FormLabel>\r\n                        <FieldArray name=\"tags\"\r\n                            render={arrayHelpers => (\r\n                                <div>\r\n                                    <Box pb={2}>\r\n                                        <Select placeholder=\"Select tags\" onChange={(e) => arrayHelpers.push(e.target.value)}>\r\n                                            {!loading && !empty && data!.map(tag => (\r\n                                                <option key={tag.id} value={tag.name}>{tag.name}</option>\r\n                                            ))\r\n                                            }\r\n                                        </Select>\r\n                                    </Box>\r\n                                    <HStack spacing={4}>\r\n                                        {values.tags && values.tags.length > 0 && (\r\n                                            values.tags.map((tag, index) => (\r\n                                                <Tag\r\n                                                    key={index}\r\n                                                    size=\"lg\"\r\n                                                    borderRadius=\"full\"\r\n                                                    variant=\"solid\"\r\n                                                    colorScheme=\"green\"\r\n                                                >\r\n\r\n                                                    <TagLabel>{tag}</TagLabel>\r\n                                                    <TagCloseButton onClick={() => arrayHelpers.remove(index)} />\r\n\r\n                                                </Tag>\r\n                                            ))\r\n                                        )}\r\n                                    </HStack>\r\n                                </div>\r\n\r\n                            )}\r\n                        />\r\n                        <FormLabel htmlFor={`ingredients`} pt={1}>Ingredients</FormLabel>\r\n                        <FieldArray name=\"ingredients\"\r\n                            render={arrayHelpers => (\r\n                                <div>\r\n                                    <Stack spacing={4}>\r\n                                        {values.ingredients && values.ingredients.length > 0 && (\r\n                                            values.ingredients.map((ingredients, index) => (\r\n                                                <Grid key={index} templateColumns=\"repeat(6, 1fr)\" gap={2}>\r\n                                                    <GridItem colSpan={3}>\r\n                                                        <Field name={`ingredients[${index}].name`}>\r\n                                                            {({ form, field }: FieldProps) => {\r\n                                                                return (\r\n                                                                    <FormControl isInvalid={!!form.errors?.ingredients && !!form.touched?.ingredients}>\r\n                                                                        <Input {...field} id={`ingredients[${index}].name`} placeholder=\"Ingredient\" />\r\n                                                                        <FormErrorMessage>{form.errors.name}</FormErrorMessage>\r\n                                                                    </FormControl>\r\n                                                                )\r\n                                                            }}\r\n                                                        </Field>\r\n                                                    </GridItem>\r\n                                                    <GridItem colSpan={1}>\r\n                                                        <Field name={`ingredients[${index}].amount`}>\r\n                                                            {({ form, field }: FieldProps) => (\r\n                                                                <FormControl isInvalid={!!form.errors?.ingredients && !!form.touched?.ingredients}>\r\n                                                                    <Input {...field} id={`ingredients[${index}].amount`} placeholder=\"Amount\" />\r\n                                                                    <FormErrorMessage>{form.errors.name}</FormErrorMessage>\r\n                                                                </FormControl>\r\n                                                            )}\r\n                                                        </Field>\r\n                                                    </GridItem>\r\n                                                    <GridItem colSpan={1}>\r\n                                                        <Field name={`ingredients[${index}].suffix`}>\r\n                                                            {({ form, field }: FieldProps) => (\r\n                                                                <FormControl isInvalid={!!form.errors?.ingredients && !!form.touched?.ingredients}>\r\n                                                                    <Select id={`ingredients[${index}].suffix`} placeholder=\"Suffix\" {...field}>\r\n                                                                        {suffix.map(s => (\r\n                                                                            <option key={s} value={s}>{s}</option>\r\n                                                                        ))}\r\n                                                                    </Select>\r\n                                                                    <FormErrorMessage>{form.errors.name}</FormErrorMessage>\r\n                                                                </FormControl>\r\n                                                            )}\r\n                                                        </Field>\r\n                                                    </GridItem>\r\n                                                    <GridItem colSpan={1}>\r\n                                                        <Button onClick={() => arrayHelpers.remove(index)}>-</Button>\r\n                                                    </GridItem>\r\n                                                </Grid>\r\n                                            ))\r\n                                        )}\r\n                                        <Button onClick={() => arrayHelpers.push({ name: '', amount: 1, suffix: '' })}>+</Button>\r\n                                    </Stack>\r\n\r\n                                </div>\r\n\r\n                            )}\r\n                        />\r\n                        <Button\r\n                            mt={4}\r\n                            colorScheme=\"teal\"\r\n                            isLoading={isSubmitting}\r\n                            type=\"submit\"\r\n                        >\r\n                            {recipeId ? \"Update\" : \"Submit\"}\r\n                        </Button>\r\n                    </Form>\r\n                )\r\n            }}\r\n        </Formik>\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Recipes.tsx",["168","169"],"import React, { useEffect, useState } from 'react';\r\nimport { useRecipes } from '../hooks/useRecipes';\r\nimport { RecipeCard } from './RecipeCard';\r\nimport { Text, Spinner, SimpleGrid, Center, VStack, Divider } from '@chakra-ui/react';\r\nimport { useAuth } from '../hooks/useAuth'\r\nimport {\r\n    StringParam,\r\n    NumberParam,\r\n    useQueryParams,\r\n    ArrayParam,\r\n    withDefault,\r\n} from 'use-query-params';\r\nimport { stringify } from 'query-string';\r\nimport { Pagination } from './Pagination';\r\nimport { SearchBar } from './SearchBar';\r\n\r\nexport const Recipes: React.FC = () => {\r\n    const { token } = useAuth();\r\n\r\n    const [query, setQuery] = useQueryParams({\r\n        searchText: StringParam,\r\n        pageNumber: NumberParam,\r\n        pageSize: NumberParam,\r\n        tags: withDefault(ArrayParam, []),\r\n    });\r\n\r\n    const { pageNumber, tags } = query\r\n\r\n    const { data, loading, empty } = useRecipes(token, stringify(query), true)\r\n\r\n    const onPageClick = (num: number) => {\r\n        setQuery({ ...query, pageNumber: num })\r\n    }\r\n\r\n    const onTagClick = (tag: string) => {\r\n        setQuery({ ...query, tags: [...tags, tag] })\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <SearchBar />\r\n            <Divider />\r\n            {loading ?\r\n                <Spinner /> :\r\n                empty ?\r\n                    <Text>No recipes</Text> :\r\n                    <Center>\r\n                        <VStack>\r\n                            <Text>Total recipes: {data!.totalCount}</Text>\r\n                            <SimpleGrid columns={{ sm: 2, md: 3 }} spacing={2}>\r\n                                {data!.recipes.map(recipe => (\r\n                                    < RecipeCard key={recipe.title} recipe={recipe} onTagClick={onTagClick} />\r\n                                ))}\r\n                            </SimpleGrid>\r\n                            <Pagination\r\n                                hasNext={data!.hasNext}\r\n                                hasPrevious={data!.hasPrevious}\r\n                                totalPage={data!.totalPages}\r\n                                onPageClick={onPageClick}\r\n                                currentPage={pageNumber}\r\n                            />\r\n                        </VStack>\r\n                    </Center>\r\n            }\r\n\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\n//<div>\r\n//    <h1>Hello, world!</h1>\r\n//    <p>Welcome to your new single-page application, built with:</p>\r\n//    <ul>\r\n//        <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\r\n//        <li><a href='https://facebook.github.io/react/'>React</a> for client-side code</li>\r\n//        <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\r\n//    </ul>\r\n//    <p>To help you get started, we have also set up:</p>\r\n//    <ul>\r\n//        <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\r\n//        <li><strong>Development server integration</strong>. In development mode, the development server from <code>create-react-app</code> runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\r\n//        <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration produces minified, efficiently bundled JavaScript files.</li>\r\n//    </ul>\r\n//    <p>The <code>ClientApp</code> subdirectory is a standard React application based on the <code>create-react-app</code> template. If you open a command prompt in that directory, you can run <code>npm</code> commands such as <code>npm test</code> or <code>npm install</code>.</p>\r\n//</div>","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\routes\\ProtectedRoutes.tsx",["170"],"﻿import React from \"react\";\r\nimport { Route, Redirect, RouteComponentProps } from \"react-router-dom\";\r\nimport { useAuth } from \"../hooks/useAuth\";\r\n\r\ninterface Props {\r\n    component: React.ComponentType<RouteComponentProps<any>>\r\n    path: string\r\n}\r\n\r\nconst ProtectedRoute: React.FC<Props> = ({ component: Component, ...rest }) => {\r\n    const { token } = useAuth();\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => {\r\n                if (!token) {\r\n                    return <Component {...rest} {...props} />;\r\n                } else {\r\n                    return (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/login\",\r\n                                state: {\r\n                                    from: props.location,\r\n                                },\r\n                            }}\r\n                        />\r\n                    );\r\n                }\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default ProtectedRoute;","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\NavBar.tsx",["171","172"],"﻿import { Divider } from '@chakra-ui/react'\r\nimport React from 'react'\r\nimport { Logo } from './Logo'\r\nimport { MenuLinks } from './MenuLinks'\r\nimport { MenuToggle } from './MenuToggle'\r\nimport { NavBarContainer } from './NavBarContainer'\r\n\r\nexport const NavBar: React.FC = (props) => {\r\n    const [isOpen, setIsOpen] = React.useState(false)\r\n\r\n    const toggle = () => setIsOpen(!isOpen)\r\n\r\n    return (\r\n\r\n        <NavBarContainer {...props}>\r\n            <Logo\r\n                w=\"100px\"\r\n                color={[\"white\", \"pink.500\", \"pink.500\", \"pink.500\"]}\r\n            />\r\n            <MenuToggle toggle={toggle} isOpen={isOpen} />\r\n            <MenuLinks isOpen={isOpen} />\r\n        </NavBarContainer>\r\n    )\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useUserRecipes.ts",["173"],"﻿import useSWR, { responseInterface } from \"swr\";\r\nimport { Recipe } from \"../types\";\r\n\r\nconst fetcher = async (url: string, token: string) => {\r\n    const response = await fetch(url, {\r\n        headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\r\n    });\r\n\r\n    if (response.status === 401) {\r\n        throw new Error(\"Unauthorized\")\r\n    }\r\n\r\n    return await response.json()\r\n}\r\n\r\nexport function useUserRecipes(token: string | null | undefined) {\r\n    const { data, mutate, error } = useSWR(token ? ['recipe/user', token] : null, fetcher) as responseInterface<Recipe[], Error>\r\n\r\n    const loading = !data && !error;\r\n\r\n    const empty = !data || (!!data && data.length === 0)\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        data,\r\n        mutate,\r\n        empty\r\n    };\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useWeekmenu.ts",["174","175","176"],"﻿import { parse } from \"querystring\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Recipe } from \"../types\";\r\n\r\nconst weekmenuItemFetcher = async (token: string | null | undefined, excludeIds: string) => {\r\n    const response = await fetch(\"recipe/weekmenu/item\" + excludeIds, {\r\n        headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\r\n    });\r\n    return await response.json()\r\n}\r\n\r\nconst weekmenuSpecificItemFetcher = async (token: string | null | undefined, id: number) => {\r\n    const response = await fetch(\"recipe/\" + id, {\r\n        headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\r\n    });\r\n    return await response.json()\r\n}\r\n\r\nconst weekmenuFetcher = async (token: string | null | undefined) => {\r\n    const response = await fetch(\"recipe/weekmenu?amount=5\", {\r\n        headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\r\n    });\r\n    return await response.json()\r\n}\r\n\r\nexport function useWeekmenu(amount: number, token: string | null | undefined) {\r\n    const [data, setData] = useState<Recipe[] | null>()\r\n    const [loading, setLoading] = useState(false)\r\n    const [error, setError] = useState<string | null>()\r\n\r\n    useEffect(() => {\r\n        setLoading(true)\r\n        let isCanceled = false;\r\n        const controller = new AbortController();\r\n\r\n        const myWeekMenu = localStorage.getItem(\"weekmenu\")\r\n        let parsedData\r\n        if (myWeekMenu) {\r\n            try {\r\n                parsedData = JSON.parse(myWeekMenu)\r\n            } catch (e) {\r\n                localStorage.removeItem(\"weekmenu\")\r\n                setError(e.message)\r\n            }\r\n        }\r\n\r\n        if (!parsedData || parsedData.length < 5) {\r\n            const runHandler = async () => {\r\n                try {\r\n                    const response = await fetch(\"recipe/weekmenu/?amount=\" + amount, {\r\n                        headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\r\n                    });\r\n                    const data = await response.json()\r\n                    if (isCanceled) {\r\n                        return;\r\n                    }\r\n                    localStorage.setItem(\"weekmenu\", JSON.stringify(data))\r\n                    setData(data)\r\n                    setError(\"\")\r\n                } catch (e) {\r\n                    setError(e.message)\r\n                }\r\n            }\r\n            runHandler()\r\n        } else {\r\n            setData(parsedData)\r\n        }\r\n\r\n        setLoading(false)\r\n\r\n        return () => {\r\n            isCanceled = true;\r\n            controller.abort();\r\n        };\r\n    }, [])\r\n\r\n    const onSwap = async (id: number) => {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n        if (!data) {\r\n            setError(\"No data to swap!\")\r\n            return\r\n        }\r\n\r\n        const excludeRecipes = data.reduce((accumulator, recipe) => {\r\n            return accumulator + \"excludeId=\" + recipe.id + \"&\"\r\n        }, \"/?\")\r\n\r\n        try {\r\n            const recipe = await weekmenuItemFetcher(token, excludeRecipes)\r\n            if (recipe) {\r\n                const index = data.findIndex(recipe => recipe.id === id)\r\n                const newWeekmenu = [...data.slice(0, index), recipe, ...data.slice(index + 1)]\r\n                localStorage.setItem(\"weekmenu\", JSON.stringify(newWeekmenu))\r\n                setData(newWeekmenu);\r\n                setError(\"\")\r\n            }\r\n        } catch (e) {\r\n            setError(e.message)\r\n        }\r\n    }\r\n\r\n    const onIdSwap = async (oldId: number, newId: number) => {\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n        if (!data) {\r\n            setError(\"No data to swap!\")\r\n            return\r\n        }\r\n\r\n        if (oldId === newId || data.find(r => r.id === newId) !== undefined) {\r\n            setError(`Cannot swap recipe with ${oldId} with ${newId}!`)\r\n            return\r\n        }\r\n\r\n        try {\r\n            const recipe = await weekmenuSpecificItemFetcher(token, newId)\r\n            if (recipe) {\r\n                const index = data.findIndex(recipe => recipe.id === oldId)\r\n                const newWeekmenu = [...data.slice(0, index), recipe, ...data.slice(index + 1)]\r\n                localStorage.setItem(\"weekmenu\", JSON.stringify(newWeekmenu))\r\n                setData(newWeekmenu);\r\n                setError(\"\")\r\n            }\r\n        } catch (e) {\r\n            setError(e.message)\r\n        }\r\n    }\r\n\r\n    const onSwapAll = async () => {\r\n        setLoading(true)\r\n        try {\r\n            const data = await weekmenuFetcher(token)\r\n            localStorage.setItem(\"weekmenu\", JSON.stringify(data))\r\n            setData(data)\r\n        } catch (e) {\r\n            setError(e.message)\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        data,\r\n        onSwap,\r\n        onSwapAll,\r\n        onIdSwap\r\n    };\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useTags.ts",["177"],"﻿import useSWR, { responseInterface } from \"swr\";\r\nimport { Tags } from \"../types\";\r\n\r\nconst fetcher = async (url: string) => {\r\n    const response = await fetch(url);\r\n    return await response.json()\r\n}\r\n\r\nexport function useTags() {\r\n    const { data, mutate, error } = useSWR('tag', fetcher) as responseInterface<Tags[], any>\r\n\r\n    const loading = !data && !error;\r\n\r\n    const empty = !!data && data.length === 0\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        data,\r\n        mutate,\r\n        empty\r\n    };\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useRecipe.ts",["178"],"﻿import useSWR, { responseInterface } from \"swr\";\r\nimport { Recipe } from \"../types\";\r\n\r\nconst fetcher = async (url: string, token: string) => {\r\n    const response = await fetch(url, {\r\n        headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\r\n    });\r\n    return await response.json()\r\n}\r\n\r\nexport function useRecipe(id: string | null | undefined, token: string | null | undefined) {\r\n    const { data, mutate, error } = useSWR(id ? [\"recipe/\" + id, token] : null, fetcher) as responseInterface<Recipe, any>\r\n\r\n    const loading = !data && !error;\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        data,\r\n        mutate,\r\n    };\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\utils\\shoppingListGenerator.ts",["179","180"],"﻿import { Ingredients, Recipe } from \"../types\";\r\nimport * as _ from \"lodash\";\r\nimport convert from 'convert';\r\n\r\ninterface RecipeItem {\r\n    itemName: string,\r\n    amount: number\r\n    suffix: string\r\n}\r\n\r\nexport const generateShoppingList = (recipes: Recipe[]) => {\r\n    const ingredients = _.flatMap(recipes, getIngredients)\r\n    console.log(\"or\", ingredients);\r\n    return sumIngredients(ingredients)\r\n}\r\n\r\nconst getIngredients = (recipe: Recipe) => {\r\n    return recipe.ingredients;\r\n}\r\n\r\nconst sumIngredients = (ingredients: Ingredients[]) => {\r\n    let groupIngredients = [] as Ingredients[]\r\n\r\n    ingredients.forEach(ingredient => {\r\n        let index = groupIngredients.findIndex(i => i.name.toLowerCase() === ingredient.name.toLowerCase())\r\n        if (index < 0) {\r\n            groupIngredients.push({ ...ingredient })\r\n        } else {\r\n            if (groupIngredients[index].suffix !== ingredient.suffix) {\r\n                const num = tryToConvert(ingredient.amount, ingredient.suffix, groupIngredients[index].suffix)\r\n                console.log(`TRying to convert ${ingredient.suffix} to ${groupIngredients[index].suffix}`);\r\n                if (num !== -1) {\r\n                    groupIngredients[index].amount = groupIngredients[index].amount + num\r\n                } else {\r\n                    groupIngredients.push(ingredient)\r\n                }\r\n            } else {\r\n                groupIngredients[index].amount = groupIngredients[index].amount + ingredient.amount\r\n            }\r\n        }\r\n    })\r\n\r\n    console.log(\"gi\", groupIngredients);\r\n\r\n    return groupIngredients\r\n}\r\n\r\nconst tryToConvert = (value: number, from: any, to: any) => {\r\n    try {\r\n        console.log(convert(value).from(from).to(to));\r\n        return convert(value).from(from).to(to)\r\n    } catch {\r\n        console.log(\"Failed\");\r\n        return -1\r\n    }\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useRecipes.ts",["181"],"﻿import useSWR, { responseInterface } from \"swr\";\r\nimport { RecipePaginated } from \"../types\";\r\n\r\nconst fetcher = async (url: string, token: string) => {\r\n    const response = await fetch(url, {\r\n        headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\r\n    });\r\n    return await response.json()\r\n}\r\n\r\nexport function useRecipes(token: string | null | undefined, query: string | null | undefined, shouldFetch: boolean) {\r\n    let url = 'recipe'\r\n    if (query) {\r\n        url = url + \"/?\" + query\r\n    }\r\n\r\n    const { data, mutate, error } = useSWR(shouldFetch ? [url, token] : null, fetcher) as responseInterface<RecipePaginated, any>\r\n\r\n    const loading = !data && !error;\r\n\r\n    const empty = !data || (!!data && !data.recipes) || (data.recipes.length === 0)\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        data,\r\n        mutate,\r\n        empty\r\n    };\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\MiniRecipeCard.tsx",["182","183"],"﻿import { Box, Button, Heading, HStack, Image, VStack, Text, Spinner, Divider, Menu, MenuButton, MenuList, MenuItem, Center, Tooltip } from '@chakra-ui/react';\r\nimport React, { useState } from 'react';\r\nimport { Recipe } from '../types';\r\nimport { RepeatIcon, ChevronDownIcon } from '@chakra-ui/icons'\r\nimport { useHistory } from 'react-router';\r\n\r\ntype Props = {\r\n    recipe: Recipe;\r\n    onSwap: (id: number) => void\r\n    openRecipePicker: () => void\r\n    setCurrentItem: React.Dispatch<React.SetStateAction<number | undefined>>\r\n    setType: React.Dispatch<React.SetStateAction<\"search\" | \"myrecipe\" | undefined>>\r\n    token: string | null | undefined\r\n};\r\n\r\nexport const MiniRecipeCard: React.FC<Props> = (props) => {\r\n    const [loading, setLoading] = useState(false)\r\n    const history = useHistory()\r\n\r\n    const onSwap = async () => {\r\n        setLoading(true)\r\n        await props.onSwap(props.recipe.id)\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Box\r\n                maxW=\"sm\"\r\n                borderWidth=\"1px\"\r\n                borderRadius=\"lg\"\r\n                overflow=\"hidden\"\r\n                _hover={{\r\n                    boxShadow: \"rgba(0, 0, 0, 0.22) 0px 19px 43px\",\r\n                    //transform: \"translate3d(0px, -1px, 0px)\"\r\n                }}\r\n            >\r\n                <VStack>\r\n                    <Box onClick={() => history.push(`/recipes/${props.recipe.id}`)}>\r\n                        <Image src={props.recipe.imgUrl} alt={props.recipe.title} objectFit=\"cover\" overflow=\"hidden\" height=\"200px\" width=\"300px\" />\r\n                        <Center pt={1}>\r\n                            <Heading size=\"sm\">\r\n                                {props.recipe.title}\r\n                            </Heading>\r\n                        </Center>\r\n                    </Box>\r\n                    <Box pb={2}>\r\n                        <HStack justify=\"space-betweens\">\r\n                            <Text>Likes: {props.recipe.vote}</Text>\r\n                            <Box h=\"25px\">\r\n                                <Divider orientation=\"vertical\" />\r\n                            </Box>\r\n                            <Menu >\r\n                                <Tooltip label=\"Swap recipe\" fontSize=\"md\">\r\n                                    <MenuButton as={Button} size=\"xs\" colorScheme=\"pink\" variant=\"outline\" >\r\n                                        {loading ? <Spinner size=\"xs\" /> : <RepeatIcon />}\r\n                                    </MenuButton>\r\n                                </Tooltip>\r\n                                <MenuList>\r\n                                    <MenuItem\r\n                                        onClick={() => onSwap()}\r\n                                    >\r\n                                        Random Swap\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        onClick={() => {\r\n                                            props.setCurrentItem(props.recipe.id);\r\n                                            props.openRecipePicker()\r\n                                            props.setType(\"search\")\r\n                                        }}\r\n                                    >\r\n                                        Search\r\n                                    </MenuItem>\r\n                                    <MenuItem\r\n                                        isDisabled={!props.token}\r\n                                        onClick={() => {\r\n                                            props.setCurrentItem(props.recipe.id);\r\n                                            props.openRecipePicker()\r\n                                            props.setType(\"myrecipe\")\r\n                                        }}\r\n                                    >\r\n                                        My recipes\r\n                                    </MenuItem>\r\n                                </MenuList>\r\n                            </Menu>\r\n                        </HStack>\r\n                    </Box>\r\n                </VStack>\r\n            </Box>\r\n        </React.Fragment>\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\DisplayIngredients.tsx",["184"],"﻿import { Box, Table, Tbody, Td, Th, Thead, Tr } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { Ingredients } from '../types';\r\n\r\ninterface Props {\r\n    ingredients: Ingredients[]\r\n}\r\n\r\nexport const DisplayIngredients: React.FC<Props> = (props) => {\r\n    return (\r\n        <Box bg=\"pink.50\" borderColor=\"pink.500\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\" p=\"2\">\r\n            <Table size=\"sm\" colorScheme=\"pink\">\r\n                <Thead>\r\n                    <Tr>\r\n                        <Th>Ingredient</Th>\r\n                        <Th isNumeric>Amount</Th>\r\n                        <Th>Suffix</Th>\r\n                    </Tr>\r\n                </Thead>\r\n                <Tbody>\r\n                    {props.ingredients.map(ingredient => (\r\n                        < Tr key={`${ingredient.name}-${ingredient.amount}-${ingredient.suffix}`}>\r\n                            <Td>{ingredient.name}</Td>\r\n                            <Td isNumeric>{Math.round((ingredient.amount + Number.EPSILON) * 100) / 100}</Td>\r\n                            <Td>{ingredient.suffix}</Td>\r\n                        </Tr>\r\n                    ))}\r\n                </Tbody>\r\n            </Table>\r\n        </Box>\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipePickerModal.tsx",["185"],"﻿import { Button, Center, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Spinner, Text, VStack, HStack, Input } from '@chakra-ui/react';\r\nimport React, { SetStateAction, useState } from 'react';\r\nimport { Recipe, RecipePaginated } from '../types';\r\nimport { RecipeListModal } from './RecipeListModal';\r\n\r\ninterface Query {\r\n    searchText: string | undefined\r\n    pageSize: number\r\n}\r\n\r\ninterface Props {\r\n    myRecipes: Recipe[] | undefined\r\n    searchRecipes: RecipePaginated | undefined\r\n    query: Query\r\n    setQuery: React.Dispatch<SetStateAction<Query>>\r\n    error: Error | undefined\r\n    isOpen: boolean\r\n    onClose: () => void\r\n    loading: boolean\r\n    onIdSwap: (newId: number) => void\r\n    type: \"search\" | \"myrecipe\" | undefined\r\n}\r\n\r\nexport const RecipePickerModal: React.FC<Props> = (props) => {\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [searchText, setSearchText] = useState<string>(\"\")\r\n\r\n    const onIdSwap = async (id: number) => {\r\n        setLoading(true)\r\n        await props.onIdSwap(id)\r\n        props.onClose()\r\n        setLoading(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                isOpen={props.isOpen}\r\n                onClose={props.onClose}\r\n            >\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>Pick a recipe</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        <VStack>\r\n                            {props.type === \"search\" &&\r\n                                <HStack>\r\n                                    <Input onChange={(e) => setSearchText(e.target.value)} value={searchText} />\r\n                                    <Button\r\n                                        onClick={() => props.setQuery({ pageSize: 10, searchText })}\r\n                                    >\r\n                                        Search\r\n                                    </Button>\r\n                                </HStack>\r\n                            }\r\n                            {props.searchRecipes && <Text> {`Showing ${props.searchRecipes.recipes.length + 1 || 0}  recipes`}</Text>}\r\n                            {props.myRecipes && <Text> {`Showing ${props.myRecipes.length + 1 || 0}  recipes`}</Text>}\r\n                            {props.loading ?\r\n                                <Center>\r\n                                    <Spinner />\r\n                                </Center> :\r\n                                    props.error ||\r\n                                !props.type ||\r\n                                !(props.myRecipes || props.searchRecipes?.recipes) ?\r\n                                    <Text> Could not retrive recipes </Text> :\r\n                                        <RecipeListModal\r\n                                            loading={loading}\r\n                                            onIdSwap={onIdSwap}\r\n                                            recipes={props.type === \"myrecipe\" ? props.myRecipes! : props.searchRecipes!.recipes}\r\n                                        />\r\n                            }\r\n                            {loading && <Center pt={2}><Spinner /></Center>}\r\n                        </VStack>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button colorScheme=\"yellow\" mr={3} onClick={props.onClose}>\r\n                            Close\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipeCard.tsx",["186"],"﻿import React from 'react';\r\nimport { Badge, Box, HStack, Image } from '@chakra-ui/react';\r\nimport { Recipe } from '../types';\r\nimport { useHistory } from 'react-router';\r\n\r\ntype Props = {\r\n    recipe: Recipe;\r\n    onTagClick?: (tag: string) => void\r\n};\r\n\r\nexport const RecipeCard: React.FC<Props> = (props) => {\r\n    const history = useHistory()\r\n    return (\r\n        <Box maxW=\"sm\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\">\r\n\r\n            <Image src={props.recipe.imgUrl} alt={props.recipe.title} objectFit=\"cover\" overflow=\"hidden\" height=\"200px\" width=\"300px\" />\r\n            <Box p=\"6\">\r\n                <Box\r\n                    mt=\"1\"\r\n                    fontWeight=\"semibold\"\r\n                    as=\"h4\"\r\n                    lineHeight=\"tight\"\r\n                    isTruncated\r\n                    onClick={() => history.push(\"/recipes/\" + props.recipe.id)}\r\n                    _hover={{ cursor: \"pointer\", color: \"pink.500\" }}\r\n                >\r\n                    {props.recipe.title}\r\n                </Box>\r\n\r\n                <Box>\r\n                    {props.recipe.shortDescription}\r\n                </Box>\r\n                <HStack>\r\n                    {props.recipe.tags.map((tag, i) => (\r\n                        <Badge\r\n                            key={tag.name}\r\n                            borderRadius=\"full\"\r\n                            px=\"2\"\r\n                            colorScheme=\"teal\"\r\n                            onClick={() => { if (props.onTagClick) { props.onTagClick(tag.name) } }}\r\n                            _hover={{ cursor: \"pointer\", backgroundColor: \"blue.300\" }}\r\n                        >\r\n                            {tag.name}\r\n                        </Badge>\r\n                    ))}\r\n                </HStack>\r\n\r\n                <Box d=\"flex\" mt=\"2\" alignItems=\"center\">\r\n\r\n                    <Box as=\"span\" ml=\"2\" color=\"gray.600\" fontSize=\"sm\">\r\n                        {props.recipe.vote} score\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Pagination.tsx",["187"],"﻿import { Button, HStack } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n    totalPage: number;\r\n    onPageClick: (tag: number) => void\r\n    hasNext: boolean;\r\n    hasPrevious: boolean;\r\n    currentPage: number | null | undefined;\r\n}\r\n\r\nexport const Pagination: React.FC<Props> = (props) => {\r\n    return (\r\n        <HStack>\r\n            <Button\r\n                disabled={!props.hasPrevious}\r\n                onClick={() => {\r\n                    if (props.currentPage) {\r\n                        props.onPageClick(props.currentPage - 1)\r\n                    }\r\n\r\n                }}>\r\n                    Previous\r\n                </Button>\r\n\r\n            {[...Array.from({ length: props.totalPage }, (_, i) => i + 1)].map(num => (\r\n                <Button\r\n                    disabled={props?.currentPage === num}\r\n                    key={num}\r\n                    onClick={() => props.onPageClick(num)}\r\n                    colorScheme={props?.currentPage === num ? \"pink\" : undefined}\r\n                    variant={props?.currentPage === num ? \"solid\" : undefined}>\r\n                    {num}\r\n                </Button>\r\n            ))}\r\n\r\n            <Button\r\n                disabled={!props.hasNext}\r\n                onClick={() => {\r\n                    if (props.currentPage) {\r\n                        props.onPageClick(props.currentPage + 1)\r\n                    }\r\n                }}>\r\n                    Next\r\n                </Button>\r\n \r\n        </HStack>\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\SearchBar.tsx",["188"],"﻿import { Box, Button, HStack, Input, Select, Tag, TagCloseButton, TagLabel, VStack, Wrap, WrapItem } from '@chakra-ui/react';\r\nimport { Field, FieldArray, FieldArrayRenderProps, FieldProps, Form, Formik, FormikProps } from 'formik';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTags } from '../hooks/useTags';\r\nimport {\r\n    StringParam,\r\n    NumberParam,\r\n    useQueryParams,\r\n    ArrayParam,\r\n    withDefault,\r\n} from 'use-query-params';\r\n\r\ninterface Props {\r\n}\r\n\r\ninterface IQueryParams {\r\n    tags: (null | string)[] | never[];\r\n    pageSize: number;\r\n    searchText: string;\r\n}\r\n\r\nconst initialQuery = {\r\n    tags: [],\r\n    pageSize: 10,\r\n    searchText: \"\"\r\n}\r\n\r\nexport const SearchBar: React.FC<Props> = () => {\r\n    const [currentQuery, setCurrentQuery] = useState<IQueryParams>(initialQuery)\r\n\r\n    const { data, loading, empty } = useTags()\r\n\r\n    let boundArrayHelpers: FieldArrayRenderProps\r\n    const bindArrayHelpers = (arrayHelpers: FieldArrayRenderProps) => {\r\n        boundArrayHelpers = arrayHelpers\r\n    }\r\n\r\n    const [query, setQuery] = useQueryParams({\r\n        searchText: StringParam,\r\n        pageNumber: NumberParam,\r\n        pageSize: NumberParam,\r\n        tags: withDefault(ArrayParam, []),\r\n    });\r\n\r\n    const options = [2, 5, 10, 20]\r\n\r\n    useEffect(() => {\r\n        if (query) {\r\n            setCurrentQuery({\r\n                tags: query.tags || [],\r\n                pageSize: query.pageSize || 10,\r\n                searchText: query.searchText || \"\"\r\n            })\r\n        }\r\n    }, [query])\r\n\r\n    const onReset = () => {\r\n        setQuery({ pageNumber: 1, ...initialQuery })\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={currentQuery}\r\n            onSubmit={async (values, actions) => {\r\n                setQuery({ pageNumber: 1, ...values })\r\n            }}\r\n        >\r\n            {(props: FormikProps<IQueryParams>) => {\r\n                const {\r\n                    values,\r\n                    isSubmitting,\r\n                } = props\r\n                return (\r\n                    <Form>\r\n                        <Box pb={2}>\r\n                            <VStack alignItems=\"flex-end\">\r\n                                <Field name=\"searchText\">\r\n                                    {({ form, field }: FieldProps) => (\r\n                                        <Input {...field} id=\"searchText\" placeholder=\"Search\" variant=\"flushed\" />\r\n                                    )}\r\n                                </Field>\r\n                                <Wrap spacing={2} justify=\"flex-end\">\r\n                                    <WrapItem>\r\n                                        <FieldArray name=\"tags\"\r\n                                            render={arrayHelpers => {\r\n                                                bindArrayHelpers(arrayHelpers)\r\n                                                return (\r\n                                                    <div>\r\n                                                        <Box pb={2}>\r\n                                                            <Select placeholder=\"Select tags\" onChange={(e) => {\r\n                                                                arrayHelpers.push(e.target.value)\r\n                                                            }}>\r\n                                                                {!loading && !empty && data!.map(tag => (\r\n                                                                    <option key={tag.id} value={tag.name}>{tag.name}</option>\r\n                                                                ))\r\n                                                                }\r\n                                                            </Select>\r\n                                                        </Box>\r\n                                                    </div>\r\n\r\n                                                )\r\n                                            }}\r\n                                        />\r\n                                    </WrapItem>\r\n                                    <WrapItem>\r\n                                        <Field name=\"pageSize\">\r\n                                            {({ form, field }: FieldProps) => (\r\n                                                <Box>\r\n                                                    <Select placeholder=\"Show\" {...field} id=\"pageSize\" >\r\n                                                        {options.map(opt => (\r\n                                                            <option key={opt} value={opt}>{opt}</option>\r\n                                                        ))}\r\n                                                    </Select>\r\n                                                </Box>\r\n                                            )}\r\n                                        </Field>\r\n                                    </WrapItem>\r\n                                    <WrapItem>\r\n                                        <HStack>\r\n                                            <Box>\r\n                                                <Button onClick={() => (onReset())}>Reset</Button>\r\n                                            </Box>\r\n                                            <Box>\r\n                                                <Button\r\n                                                    isLoading={isSubmitting}\r\n                                                    type=\"submit\"\r\n                                                    colorScheme=\"pink\"\r\n                                                >\r\n                                                    Search\r\n                                                </Button>\r\n                                            </Box>\r\n                                        </HStack>\r\n                                    </WrapItem>\r\n                                </Wrap>\r\n                            </VStack>\r\n                            <HStack spacing={4}>\r\n                                {values.tags && values.tags.length > 0 && (\r\n                                    (values!.tags as (string)[]).map((tag: string, i: number) => (\r\n                                        <Tag\r\n                                            key={i}\r\n                                            size=\"lg\"\r\n                                            borderRadius=\"full\"\r\n                                            variant=\"solid\"\r\n                                            colorScheme=\"green\"\r\n                                        >\r\n\r\n                                            <TagLabel>{tag}</TagLabel>\r\n                                            <TagCloseButton onClick={() => boundArrayHelpers.remove(i)} />\r\n\r\n                                        </Tag>\r\n                                    ))\r\n                                )}\r\n                            </HStack>\r\n                        </Box>\r\n                    </Form>\r\n                )\r\n            }}\r\n        </Formik>\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useAuth.tsx",["189","190"],"﻿import { useState } from \"react\"\r\n\r\nexport const useAuth = () => {\r\n    const [token, setToken] = useState<string | null>(\"123\")\r\n\r\n    return {\r\n        token\r\n    }\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuLinks.tsx",["191"],"﻿import { Box, Menu, MenuButton, MenuList, Stack, MenuItem as MenuItemChakra, Button, MenuGroup, } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { MenuItem } from './MenuItem';\r\nimport { useMediaQuery } from \"@chakra-ui/react\"\r\nimport { ChevronDownIcon } from '@chakra-ui/icons'\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface Props {\r\n    isOpen: boolean\r\n}\r\n\r\nexport const MenuLinks: React.FC<Props> = ({ isOpen }) => {\r\n    const [isLargerThan420] = useMediaQuery(\"(min-width: 30em)\")\r\n\r\n    const logoutPath = \"/logout\"\r\n    const userName = \"hi\"\r\n    const profilePath = \"/profile\"\r\n\r\n    const buttonMenu = (\r\n        <Menu>\r\n            <MenuButton as={Button} rightIcon={<ChevronDownIcon />} fontWeight=\"normal\" colorScheme=\"pink\">\r\n                Profile\r\n            </MenuButton>\r\n            <MenuList>\r\n                <MenuItemChakra as={Link} to=\"/create-recipes\">Create Recipe</MenuItemChakra>\r\n                <MenuItemChakra as={Link} to=\"/my-recipes\">My Recipes</MenuItemChakra>\r\n                <MenuGroup title={`${userName}`}>\r\n                    <MenuItemChakra as={Link} to={profilePath}>\r\n                        Account\r\n                    </MenuItemChakra>\r\n                    <MenuItemChakra as={Link} to={logoutPath}>\r\n                        Logout\r\n                    </MenuItemChakra>\r\n                </MenuGroup>\r\n            </MenuList>\r\n        </Menu>\r\n    )\r\n\r\n    const listMenu = (\r\n        <React.Fragment>\r\n            <MenuItem to=\"/recipes\">Recipe</MenuItem>\r\n            <MenuItem to=\"/create-recipes\">Create Recipe</MenuItem>\r\n            <MenuItem to=\"/my-recipes\">My Recipes</MenuItem>\r\n            <MenuItem to={profilePath}>\r\n                {`${userName}'s account`}\r\n            </MenuItem>\r\n            <MenuItem to={logoutPath}>\r\n                Logout\r\n            </MenuItem>\r\n        </React.Fragment>\r\n    )\r\n\r\n    return (\r\n        <Box\r\n            display={{ base: isOpen ? \"block\" : \"none\", sm: \"block\" }}\r\n            flexBasis={{ base: \"100%\", sm: \"auto\" }}\r\n        >\r\n            <Stack\r\n                spacing={8}\r\n                align=\"center\"\r\n                justify={[\"center\", \"flex-end\", \"flex-end\", \"flex-end\"]}\r\n                direction={[\"column\", \"row\", \"row\", \"row\"]}\r\n                pt={[4, 0, 0, 0]}\r\n            >\r\n                <MenuItem to=\"/\">Home</MenuItem>\r\n                <MenuItem to=\"/recipes\">Recipes</MenuItem>\r\n                {isLargerThan420 ? buttonMenu : listMenu}\r\n            </Stack>\r\n        </Box>\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\Logo.tsx",["192"],"﻿import React from \"react\"\r\nimport { Box, Text } from \"@chakra-ui/react\"\r\n\r\nexport const Logo = (props: any) => {\r\n    return (\r\n        <Box {...props}>\r\n            <Text fontSize=\"lg\" fontWeight=\"bold\">\r\n                WeekMenu\r\n            </Text>\r\n        </Box>\r\n    )\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuToggle.tsx",["193"],"﻿import React from \"react\"\r\nimport { Box } from \"@chakra-ui/react\"\r\nimport { HamburgerIcon, CloseIcon } from '@chakra-ui/icons'\r\n\r\ninterface Props {\r\n    isOpen: boolean\r\n    toggle: () => void\r\n}\r\n\r\nexport const MenuToggle: React.FC<Props> = ({ toggle, isOpen }) => {\r\n    return (\r\n        <Box display={{ base: \"block\", sm: \"none\" }} onClick={() => toggle()}>\r\n            {isOpen ? <CloseIcon /> : <HamburgerIcon />}\r\n        </Box>\r\n    )\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\NavBarContainer.tsx",["194"],"﻿import { Flex } from '@chakra-ui/react'\r\nimport React from 'react'\r\n\r\nexport const NavBarContainer: React.FC = ({ children, ...props }) => {\r\n    return (\r\n        <Flex\r\n            as=\"nav\"\r\n            align=\"center\"\r\n            justify=\"space-between\"\r\n            wrap=\"wrap\"\r\n            w=\"100%\"\r\n            mb={4}\r\n            p={4}\r\n            bg={[\"pink.500\", \"transparent\", \"transparent\", \"transparent\"]}\r\n            color={[\"white\", \"pink.700\", \"pink.700\", \"pink.700\"]}\r\n            borderBottom=\"1px\"\r\n            borderBottomColor=\"pink.700\"\r\n            {...props}\r\n        >\r\n            {children}\r\n        </Flex>\r\n    )\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipeListModal.tsx",["195"],"﻿import { Button, Heading, Table, Tbody, Td, Th, Thead, Tr } from '@chakra-ui/react';\r\nimport { Recipe } from '../types';\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n    recipes: Recipe[]\r\n    loading: boolean\r\n    onIdSwap: (newId: number) => void\r\n}\r\n\r\nexport const RecipeListModal: React.FC<Props> = (props) => {\r\n    return (\r\n        <Table variant=\"simple\">\r\n            <Thead>\r\n                <Tr>\r\n                    <Th>Title</Th>\r\n                    <Th>Action</Th>\r\n                </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n                {props.recipes.map(recipe => (\r\n                    <Tr key={recipe.id}>\r\n                        <Td><Heading size=\"xs\">{recipe.title}</Heading></Td>\r\n                        <Td>\r\n                            <Button\r\n                                size=\"sm\"\r\n                                isDisabled={props.loading}\r\n                                disabled={props.loading}\r\n                                onClick={() => props.onIdSwap(recipe.id)}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </Td>\r\n                    </Tr>\r\n                ))}\r\n            </Tbody>\r\n        </Table>\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuItem.tsx",["196"],"﻿import React from \"react\"\r\nimport { Text, Link } from \"@chakra-ui/react\"\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\ninterface Props {\r\n    isLast?: boolean\r\n    to: string\r\n}\r\n\r\nexport const MenuItem: React.FC<Props> = ({ children, isLast, to = \"/\", ...rest }) => {\r\n    return (\r\n        <Link as={RouterLink} to={to}>\r\n            <Text display=\"block\" {...rest}>\r\n                {children}\r\n            </Text>\r\n        </Link>\r\n    )\r\n}",["197","198"],{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"207"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"208"},{"ruleId":"209","severity":1,"message":"210","line":1,"column":57,"nodeType":"211","messageId":"212","endLine":1,"endColumn":63},{"ruleId":"209","severity":1,"message":"213","line":1,"column":114,"nodeType":"211","messageId":"212","endLine":1,"endColumn":121},{"ruleId":"209","severity":1,"message":"214","line":2,"column":17,"nodeType":"211","messageId":"212","endLine":2,"endColumn":26},{"ruleId":"209","severity":1,"message":"215","line":2,"column":28,"nodeType":"211","messageId":"212","endLine":2,"endColumn":36},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"216"},{"ruleId":"209","severity":1,"message":"217","line":1,"column":113,"nodeType":"211","messageId":"212","endLine":1,"endColumn":118},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"218"},{"ruleId":"209","severity":1,"message":"214","line":1,"column":17,"nodeType":"211","messageId":"212","endLine":1,"endColumn":26},{"ruleId":"209","severity":1,"message":"215","line":1,"column":28,"nodeType":"211","messageId":"212","endLine":1,"endColumn":36},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"219"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"220"},{"ruleId":"209","severity":1,"message":"213","line":1,"column":10,"nodeType":"211","messageId":"212","endLine":1,"endColumn":17},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"221"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"222"},{"ruleId":"209","severity":1,"message":"223","line":1,"column":10,"nodeType":"211","messageId":"212","endLine":1,"endColumn":15},{"ruleId":"224","severity":1,"message":"225","line":75,"column":8,"nodeType":"226","endLine":75,"endColumn":10,"suggestions":"227"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"228"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"229"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"230"},{"ruleId":"209","severity":1,"message":"231","line":5,"column":11,"nodeType":"211","messageId":"212","endLine":5,"endColumn":21},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"232"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"233"},{"ruleId":"209","severity":1,"message":"234","line":4,"column":22,"nodeType":"211","messageId":"212","endLine":4,"endColumn":37},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"235"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"236"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"237"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"238"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"239"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"240"},{"ruleId":"209","severity":1,"message":"241","line":4,"column":19,"nodeType":"211","messageId":"212","endLine":4,"endColumn":27},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"242"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"243"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"244"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"245"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"246"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":1,"nodeType":"205","messageId":"206","fix":"247"},{"ruleId":"199","replacedBy":"248"},{"ruleId":"201","replacedBy":"249"},"no-native-reassign",["250"],"no-negated-in-lhs",["251"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"252","text":"253"},{"range":"254","text":"253"},"@typescript-eslint/no-unused-vars","'HStack' is defined but never used.","Identifier","unusedVar","'Divider' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.",{"range":"255","text":"253"},"'color' is defined but never used.",{"range":"256","text":"253"},{"range":"257","text":"253"},{"range":"258","text":"253"},{"range":"259","text":"253"},{"range":"260","text":"253"},"'parse' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'amount' and 'token'. Either include them or remove the dependency array.","ArrayExpression",["261"],{"range":"262","text":"253"},{"range":"263","text":"253"},{"range":"264","text":"253"},"'RecipeItem' is defined but never used.",{"range":"265","text":"253"},{"range":"266","text":"253"},"'ChevronDownIcon' is defined but never used.",{"range":"267","text":"253"},{"range":"268","text":"253"},{"range":"269","text":"253"},{"range":"270","text":"253"},{"range":"271","text":"253"},{"range":"272","text":"253"},"'setToken' is assigned a value but never used.",{"range":"273","text":"253"},{"range":"274","text":"253"},{"range":"275","text":"253"},{"range":"276","text":"253"},{"range":"277","text":"253"},{"range":"278","text":"253"},["250"],["251"],"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],{"desc":"279","fix":"280"},[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],"Update the dependencies array to be: [amount, token]",{"range":"281","text":"282"},[2593,2595],"[amount, token]"]