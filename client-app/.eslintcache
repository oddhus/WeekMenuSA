[{"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\index.tsx":"1","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\Contexts.tsx":"3","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\App.tsx":"4","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Layout.js":"5","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\UserRecipes.tsx":"6","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Home.tsx":"7","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\CreateRecipe.tsx":"8","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\DisplayRecipe.tsx":"9","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Recipes.tsx":"10","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Register.tsx":"11","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Login.tsx":"12","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Account.tsx":"13","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\contexts\\authContext.tsx":"14","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\routes\\NoUserRoute.tsx":"15","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\routes\\ProtectedRoutes.tsx":"16","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\NavBar.tsx":"17","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useUserRecipes.ts":"18","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useWeekmenu.ts":"19","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useRecipes.ts":"20","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useRecipe.ts":"21","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useTags.ts":"22","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\utils\\shoppingListGenerator.ts":"23","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\MiniRecipeCard.tsx":"24","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\DisplayIngredients.tsx":"25","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipePickerModal.tsx":"26","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipeCard.tsx":"27","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\SearchBar.tsx":"28","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Pagination.tsx":"29","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuLinks.tsx":"30","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\Logo.tsx":"31","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuToggle.tsx":"32","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\NavBarContainer.tsx":"33","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipeListModal.tsx":"34","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuItem.tsx":"35","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\MiniRecipeSkeleton.tsx":"36","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\WeekMenuOptions.tsx":"37","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useHasChanged.ts":"38","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\ConfirmModal.tsx":"39","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\utils\\refreshFetch.ts":"40","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\utils\\storageActions.ts":"41"},{"size":771,"mtime":1611260600678,"results":"42","hashOfConfig":"43"},{"size":425,"mtime":1611126747107,"results":"44","hashOfConfig":"43"},{"size":490,"mtime":1611298828125,"results":"45","hashOfConfig":"43"},{"size":1259,"mtime":1611303607947,"results":"46","hashOfConfig":"43"},{"size":371,"mtime":1611427767997,"results":"47","hashOfConfig":"43"},{"size":4213,"mtime":1611602705107,"results":"48","hashOfConfig":"43"},{"size":5884,"mtime":1611819286215,"results":"49","hashOfConfig":"43"},{"size":13774,"mtime":1611818630351,"results":"50","hashOfConfig":"43"},{"size":3329,"mtime":1611819242183,"results":"51","hashOfConfig":"43"},{"size":3596,"mtime":1611819333668,"results":"52","hashOfConfig":"43"},{"size":5082,"mtime":1611861105001,"results":"53","hashOfConfig":"43"},{"size":4057,"mtime":1611860829938,"results":"54","hashOfConfig":"43"},{"size":1091,"mtime":1611602127587,"results":"55","hashOfConfig":"43"},{"size":1702,"mtime":1611817834904,"results":"56","hashOfConfig":"43"},{"size":878,"mtime":1611303596327,"results":"57","hashOfConfig":"43"},{"size":888,"mtime":1611298828125,"results":"58","hashOfConfig":"43"},{"size":601,"mtime":1611299231971,"results":"59","hashOfConfig":"43"},{"size":879,"mtime":1611818548831,"results":"60","hashOfConfig":"43"},{"size":4320,"mtime":1611819766033,"results":"61","hashOfConfig":"43"},{"size":771,"mtime":1611818727742,"results":"62","hashOfConfig":"43"},{"size":579,"mtime":1611819401770,"results":"63","hashOfConfig":"43"},{"size":514,"mtime":1611815175543,"results":"64","hashOfConfig":"43"},{"size":1685,"mtime":1611602782453,"results":"65","hashOfConfig":"43"},{"size":3384,"mtime":1611426015054,"results":"66","hashOfConfig":"43"},{"size":1221,"mtime":1611298828124,"results":"67","hashOfConfig":"43"},{"size":3639,"mtime":1611298828125,"results":"68","hashOfConfig":"43"},{"size":2063,"mtime":1611298828125,"results":"69","hashOfConfig":"43"},{"size":6021,"mtime":1611649250122,"results":"70","hashOfConfig":"43"},{"size":1512,"mtime":1611298828125,"results":"71","hashOfConfig":"43"},{"size":2919,"mtime":1611304099981,"results":"72","hashOfConfig":"43"},{"size":406,"mtime":1611301423046,"results":"73","hashOfConfig":"43"},{"size":445,"mtime":1611298828125,"results":"74","hashOfConfig":"43"},{"size":585,"mtime":1611300241236,"results":"75","hashOfConfig":"43"},{"size":1258,"mtime":1611298828125,"results":"76","hashOfConfig":"43"},{"size":442,"mtime":1611304099980,"results":"77","hashOfConfig":"43"},{"size":887,"mtime":1611427995327,"results":"78","hashOfConfig":"43"},{"size":3923,"mtime":1611603558654,"results":"79","hashOfConfig":"43"},{"size":863,"mtime":1611841594894,"results":"80","hashOfConfig":"43"},{"size":1183,"mtime":1611602730487,"results":"81","hashOfConfig":"43"},{"size":1563,"mtime":1611817604482,"results":"82","hashOfConfig":"43"},{"size":936,"mtime":1611817564189,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"fxq1k9",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"98","usedDeprecatedRules":"86"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"103","usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"106","usedDeprecatedRules":"86"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"112","usedDeprecatedRules":"86"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"133","usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"140","usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"149","usedDeprecatedRules":"86"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\index.tsx",[],["177","178"],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\Contexts.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\App.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Layout.js",[],["179","180"],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\UserRecipes.tsx",["181"],"﻿import {\r\n  Spinner,\r\n  Text,\r\n  Box,\r\n  Heading,\r\n  Button,\r\n  useToast,\r\n  Center,\r\n  VStack,\r\n  Table,\r\n  Thead,\r\n  Tr,\r\n  Th,\r\n  Tbody,\r\n  Td,\r\n  WrapItem,\r\n  Wrap,\r\n  useDisclosure,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { useUserRecipes } from \"../hooks/useUserRecipes\";\r\nimport { useHistory } from \"react-router\";\r\nimport { AuthContext } from \"../contexts/authContext\";\r\nimport { ConfirmModal } from \"./ConfirmModal\";\r\n\r\ninterface RecipeInfo {\r\n  id: number | null;\r\n  title: string | null;\r\n}\r\n\r\nexport const UserRecipes = () => {\r\n  const [currentItems, setCurrentItems] = useState<RecipeInfo>({\r\n    id: null,\r\n    title: null,\r\n  });\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n  const { user } = useContext(AuthContext);\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  const { data, loading, mutate, empty } = useUserRecipes(user?.token);\r\n\r\n  const onDelete = async () => {\r\n    const response = await fetch(\"recipe/\" + currentItems.id, {\r\n      method: \"DELETE\",\r\n      headers: !user?.token ? {} : { Authorization: `Bearer ${user.token}` },\r\n      body: null,\r\n    });\r\n    if (response.ok) {\r\n      mutate((recipes) => {\r\n        if (!recipes) {\r\n          return;\r\n        }\r\n        const filteredRecipes = recipes!.filter(\r\n          (recipe) => recipe.id !== currentItems.id\r\n        );\r\n        return [...filteredRecipes];\r\n      });\r\n      toast({\r\n        title: \"Recipe Deleted.\",\r\n        description: `Successfully deleted ${currentItems.title}`,\r\n        status: \"success\",\r\n        duration: 4000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ConfirmModal\r\n        title=\"Delete Recipe\"\r\n        bodyText=\"This will permanently delete your recipe.\"\r\n        buttonAction={onDelete}\r\n        isOpen={isOpen}\r\n        onClose={onClose}\r\n        primaryButtonText=\"Delete\"\r\n      />\r\n      <Center>\r\n        {loading ? (\r\n          <Spinner />\r\n        ) : empty ? (\r\n          <VStack spacing={4}>\r\n            <Heading color=\"grey.500\">You have no recipes..</Heading>\r\n            <Center>\r\n              <Button\r\n                color=\"pink.500\"\r\n                onClick={() => history.push(\"/create-recipes\")}\r\n              >\r\n                Create One?\r\n              </Button>\r\n            </Center>\r\n          </VStack>\r\n        ) : (\r\n          <Table variant=\"simple\">\r\n            <Thead>\r\n              <Tr>\r\n                <Th>Title</Th>\r\n                <Th>Short description</Th>\r\n                <Th>Actions</Th>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              {data!.map((recipe) => (\r\n                <Tr key={recipe.id}>\r\n                  <Td>\r\n                    <Text fontWeight=\"bold\">{recipe.title}</Text>\r\n                  </Td>\r\n                  <Td>\r\n                    <Box maxW={[70, 150]}>\r\n                      <Text isTruncated>{recipe.shortDescription}</Text>\r\n                    </Box>\r\n                  </Td>\r\n                  <Td>\r\n                    <Wrap>\r\n                      <WrapItem>\r\n                        <Button\r\n                          colorScheme=\"yellow\"\r\n                          variant=\"solid\"\r\n                          onClick={() => history.push(`edit/${recipe.id}`)}\r\n                        >\r\n                          Edit\r\n                        </Button>\r\n                      </WrapItem>\r\n                      <WrapItem>\r\n                        <Button\r\n                          colorScheme=\"pink\"\r\n                          variant=\"solid\"\r\n                          onClick={() => {\r\n                            setCurrentItems({\r\n                              id: recipe.id,\r\n                              title: recipe.title,\r\n                            });\r\n                            onOpen();\r\n                          }}\r\n                        >\r\n                          Delete\r\n                        </Button>\r\n                      </WrapItem>\r\n                    </Wrap>\r\n                  </Td>\r\n                </Tr>\r\n              ))}\r\n            </Tbody>\r\n          </Table>\r\n        )}\r\n      </Center>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Home.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\CreateRecipe.tsx",["182"],"﻿import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  FormErrorMessage,\r\n  FormLabel,\r\n  Input,\r\n  Select,\r\n  HStack,\r\n  Textarea,\r\n  Tag,\r\n  TagLabel,\r\n  TagCloseButton,\r\n  Box,\r\n  Stack,\r\n  Grid,\r\n  GridItem,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  Field,\r\n  FieldArray,\r\n  FieldProps,\r\n  Form,\r\n  Formik,\r\n  FormikProps,\r\n} from \"formik\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport * as Yup from \"yup\";\r\nimport { useRecipe } from \"../hooks/useRecipe\";\r\nimport { useTags } from \"../hooks/useTags\";\r\nimport { useUserRecipes } from \"../hooks/useUserRecipes\";\r\nimport { Ingredients, Recipe } from \"../types\";\r\nimport { AuthContext } from \"../contexts/authContext\";\r\n\r\ninterface FormValues {\r\n  title: string;\r\n  shortDescription: string;\r\n  description: string;\r\n  tags: string[];\r\n  ingredients: Ingredients[];\r\n  imgUrl: string;\r\n}\r\n\r\nconst suffix = [\"pcs\", \"kg\", \"g\", \"ts\", \"L\", \"dL\"];\r\n\r\nexport const CreateRecipe = () => {\r\n  const [initialValues, setInitialValues] = useState<FormValues>({\r\n    title: \"\",\r\n    shortDescription: \"\",\r\n    description: \"\",\r\n    tags: [],\r\n    ingredients: [],\r\n    imgUrl: \"\",\r\n  });\r\n  const { recipeId } = useParams<{ recipeId: string | undefined }>();\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const { data, empty, loading } = useTags();\r\n  const { data: recipeData, loading: recipeLoading } = useRecipe(recipeId);\r\n  const { mutate } = useUserRecipes(user?.token);\r\n\r\n  useEffect(() => {\r\n    if (!recipeLoading && recipeData) {\r\n      setInitialValues({\r\n        title: recipeData.title,\r\n        shortDescription: recipeData.shortDescription,\r\n        description: recipeData.description,\r\n        tags: Object.values(recipeData.tags).map((tag) => tag.name),\r\n        ingredients: recipeData.ingredients,\r\n        imgUrl: recipeData.imgUrl,\r\n      });\r\n    }\r\n  }, [recipeLoading, recipeData]);\r\n\r\n  const SignupSchema = Yup.object().shape({\r\n    title: Yup.string()\r\n      .min(2, \"Too Short!\")\r\n      .max(50, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    shortDescription: Yup.string()\r\n      .min(2, \"Too Short!\")\r\n      .max(120, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    description: Yup.string()\r\n      .min(2, \"Too Short!\")\r\n      .max(500, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    imgUrl: Yup.string().max(200, \"Too Long!\"),\r\n  });\r\n\r\n  return (\r\n    <Formik\r\n      enableReinitialize\r\n      initialValues={initialValues}\r\n      onSubmit={async (values, actions) => {\r\n        console.log(values);\r\n        const response = await fetch(\r\n          recipeId ? \"/recipe/\" + recipeId : \"recipe\",\r\n          {\r\n            method: recipeId ? \"PUT\" : \"POST\",\r\n            headers: !user?.token\r\n              ? { \"Content-Type\": \"application/json\" }\r\n              : {\r\n                  \"Content-Type\": \"application/json\",\r\n                  Authorization: `Bearer ${user?.token}`,\r\n                },\r\n            body: JSON.stringify(values),\r\n          }\r\n        );\r\n\r\n        if (response.ok) {\r\n          toast({\r\n            title: recipeId ? \"Recipe updated.\" : \"Recipe created\",\r\n            description: recipeId\r\n              ? \"Your recipe was successfully updated\"\r\n              : \"Your recipe was successfully created\",\r\n            status: \"success\",\r\n            duration: 4000,\r\n            isClosable: true,\r\n          });\r\n\r\n          const recipeResponse = (await response.json()) as Recipe;\r\n\r\n          mutate((userRecipes) => {\r\n            if (!userRecipes) {\r\n              return;\r\n            }\r\n            if (recipeId) {\r\n              const filteredRecipes = userRecipes!.filter(\r\n                (recipe) => recipe.id.toString() !== recipeId\r\n              );\r\n              return [...filteredRecipes, recipeResponse];\r\n            } else {\r\n              return [...userRecipes, recipeResponse];\r\n            }\r\n          });\r\n\r\n          history.push(\"/my-recipes\");\r\n        } else {\r\n          toast({\r\n            title: \"Error\",\r\n            description: recipeId\r\n              ? \"Your recipe was not updated\"\r\n              : \"Your recipe was not created\",\r\n            status: \"error\",\r\n            duration: 4000,\r\n            isClosable: true,\r\n          });\r\n        }\r\n      }}\r\n      validationSchema={SignupSchema}\r\n    >\r\n      {(props: FormikProps<FormValues>) => {\r\n        const { values, isSubmitting } = props;\r\n        return (\r\n          <Form>\r\n            <Field name=\"title\">\r\n              {({ form, field }: FieldProps) => (\r\n                <FormControl\r\n                  isInvalid={!!form.errors?.title && !!form.touched?.title}\r\n                >\r\n                  <FormLabel htmlFor=\"title\">Title</FormLabel>\r\n                  <Input {...field} id=\"title\" placeholder=\"title\" />\r\n                  <FormErrorMessage>{form.errors.title}</FormErrorMessage>\r\n                </FormControl>\r\n              )}\r\n            </Field>\r\n            <Field name=\"shortDescription\">\r\n              {({ form, field }: FieldProps) => (\r\n                <FormControl\r\n                  isInvalid={\r\n                    !!form.errors?.shortDescription &&\r\n                    !!form.touched?.shortDescription\r\n                  }\r\n                >\r\n                  <FormLabel htmlFor=\"shortDescription\">\r\n                    Short Description\r\n                  </FormLabel>\r\n                  <Textarea\r\n                    {...field}\r\n                    id=\"shortDescription\"\r\n                    placeholder=\"Short Description\"\r\n                  />\r\n                  <FormErrorMessage>\r\n                    {form.errors.shortDescription}\r\n                  </FormErrorMessage>\r\n                </FormControl>\r\n              )}\r\n            </Field>\r\n            <Field name=\"description\">\r\n              {({ form, field }: FieldProps) => (\r\n                <FormControl\r\n                  isInvalid={\r\n                    !!form.errors?.description && !!form.touched?.description\r\n                  }\r\n                >\r\n                  <FormLabel htmlFor=\"description\">Description</FormLabel>\r\n                  <Textarea\r\n                    {...field}\r\n                    id=\"description\"\r\n                    placeholder=\"Description\"\r\n                  />\r\n                  <FormErrorMessage>{form.errors.description}</FormErrorMessage>\r\n                </FormControl>\r\n              )}\r\n            </Field>\r\n            <Field name=\"imgUrl\">\r\n              {({ form, field }: FieldProps) => (\r\n                <FormControl\r\n                  isInvalid={!!form.errors?.imgUrl && !!form.touched?.imgUrl}\r\n                >\r\n                  <FormLabel htmlFor=\"imgUrl\">ImageUrl</FormLabel>\r\n                  <Input {...field} id=\"imgUrl\" placeholder=\"imgUrl\" />\r\n                  <FormErrorMessage>{form.errors.imgUrl}</FormErrorMessage>\r\n                </FormControl>\r\n              )}\r\n            </Field>\r\n            <FormLabel htmlFor={`tags`} pt={1}>\r\n              Tags\r\n            </FormLabel>\r\n            <FieldArray\r\n              name=\"tags\"\r\n              render={(arrayHelpers) => (\r\n                <div>\r\n                  <Box pb={2}>\r\n                    <Select\r\n                      placeholder=\"Select tags\"\r\n                      onChange={(e) => arrayHelpers.push(e.target.value)}\r\n                    >\r\n                      {!loading &&\r\n                        !empty &&\r\n                        data!.map((tag) => (\r\n                          <option key={tag.id} value={tag.name}>\r\n                            {tag.name}\r\n                          </option>\r\n                        ))}\r\n                    </Select>\r\n                  </Box>\r\n                  <HStack spacing={4}>\r\n                    {values.tags &&\r\n                      values.tags.length > 0 &&\r\n                      values.tags.map((tag, index) => (\r\n                        <Tag\r\n                          key={index}\r\n                          size=\"lg\"\r\n                          borderRadius=\"full\"\r\n                          variant=\"solid\"\r\n                          colorScheme=\"green\"\r\n                        >\r\n                          <TagLabel>{tag}</TagLabel>\r\n                          <TagCloseButton\r\n                            onClick={() => arrayHelpers.remove(index)}\r\n                          />\r\n                        </Tag>\r\n                      ))}\r\n                  </HStack>\r\n                </div>\r\n              )}\r\n            />\r\n            <FormLabel htmlFor={`ingredients`} pt={1}>\r\n              Ingredients\r\n            </FormLabel>\r\n            <FieldArray\r\n              name=\"ingredients\"\r\n              render={(arrayHelpers) => (\r\n                <div>\r\n                  <Stack spacing={4}>\r\n                    {values.ingredients &&\r\n                      values.ingredients.length > 0 &&\r\n                      values.ingredients.map((ingredients, index) => (\r\n                        <Grid\r\n                          key={index}\r\n                          templateColumns=\"repeat(6, 1fr)\"\r\n                          gap={2}\r\n                        >\r\n                          <GridItem colSpan={3}>\r\n                            <Field name={`ingredients[${index}].name`}>\r\n                              {({ form, field }: FieldProps) => {\r\n                                return (\r\n                                  <FormControl\r\n                                    isInvalid={\r\n                                      !!form.errors?.ingredients &&\r\n                                      !!form.touched?.ingredients\r\n                                    }\r\n                                  >\r\n                                    <Input\r\n                                      {...field}\r\n                                      id={`ingredients[${index}].name`}\r\n                                      placeholder=\"Ingredient\"\r\n                                    />\r\n                                    <FormErrorMessage>\r\n                                      {form.errors.name}\r\n                                    </FormErrorMessage>\r\n                                  </FormControl>\r\n                                );\r\n                              }}\r\n                            </Field>\r\n                          </GridItem>\r\n                          <GridItem colSpan={1}>\r\n                            <Field name={`ingredients[${index}].amount`}>\r\n                              {({ form, field }: FieldProps) => (\r\n                                <FormControl\r\n                                  isInvalid={\r\n                                    !!form.errors?.ingredients &&\r\n                                    !!form.touched?.ingredients\r\n                                  }\r\n                                >\r\n                                  <Input\r\n                                    {...field}\r\n                                    id={`ingredients[${index}].amount`}\r\n                                    placeholder=\"Amount\"\r\n                                  />\r\n                                  <FormErrorMessage>\r\n                                    {form.errors.name}\r\n                                  </FormErrorMessage>\r\n                                </FormControl>\r\n                              )}\r\n                            </Field>\r\n                          </GridItem>\r\n                          <GridItem colSpan={1}>\r\n                            <Field name={`ingredients[${index}].suffix`}>\r\n                              {({ form, field }: FieldProps) => (\r\n                                <FormControl\r\n                                  isInvalid={\r\n                                    !!form.errors?.ingredients &&\r\n                                    !!form.touched?.ingredients\r\n                                  }\r\n                                >\r\n                                  <Select\r\n                                    id={`ingredients[${index}].suffix`}\r\n                                    placeholder=\"Suffix\"\r\n                                    {...field}\r\n                                  >\r\n                                    {suffix.map((s) => (\r\n                                      <option key={s} value={s}>\r\n                                        {s}\r\n                                      </option>\r\n                                    ))}\r\n                                  </Select>\r\n                                  <FormErrorMessage>\r\n                                    {form.errors.name}\r\n                                  </FormErrorMessage>\r\n                                </FormControl>\r\n                              )}\r\n                            </Field>\r\n                          </GridItem>\r\n                          <GridItem colSpan={1}>\r\n                            <Button onClick={() => arrayHelpers.remove(index)}>\r\n                              -\r\n                            </Button>\r\n                          </GridItem>\r\n                        </Grid>\r\n                      ))}\r\n                    <Button\r\n                      onClick={() =>\r\n                        arrayHelpers.push({ name: \"\", amount: 1, suffix: \"\" })\r\n                      }\r\n                    >\r\n                      +\r\n                    </Button>\r\n                  </Stack>\r\n                </div>\r\n              )}\r\n            />\r\n            <Button\r\n              mt={4}\r\n              colorScheme=\"teal\"\r\n              isLoading={isSubmitting}\r\n              type=\"submit\"\r\n            >\r\n              {recipeId ? \"Update\" : \"Submit\"}\r\n            </Button>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\DisplayRecipe.tsx",["183"],"﻿import {\r\n  Center,\r\n  Spinner,\r\n  VStack,\r\n  Text,\r\n  Image,\r\n  Box,\r\n  Heading,\r\n  UnorderedList,\r\n  ListItem,\r\n  HStack,\r\n  Badge,\r\n  Container,\r\n} from \"@chakra-ui/react\";\r\nimport { TriangleUpIcon, TriangleDownIcon } from \"@chakra-ui/icons\";\r\nimport { useState } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { useRecipe } from \"../hooks/useRecipe\";\r\nimport { fetch } from \"../utils/refreshFetch\";\r\n\r\nexport const DisplayRecipe = () => {\r\n  const { recipeId } = useParams<{ recipeId: string | undefined }>();\r\n  const [loadingVote, setLoadingVote] = useState(false);\r\n  const { data, loading, mutate } = useRecipe(recipeId);\r\n\r\n  const onVote = async (vote: number) => {\r\n    setLoadingVote(true);\r\n    const data = await fetch(\"/vote/\" + recipeId, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ vote }),\r\n    });\r\n\r\n    if (data.response.ok) {\r\n      mutate((recipe) => {\r\n        if (!recipe) {\r\n          return;\r\n        }\r\n        recipe.userVote = vote;\r\n        recipe.vote = recipe.vote + vote;\r\n        return recipe;\r\n      });\r\n    }\r\n\r\n    setLoadingVote(false);\r\n  };\r\n\r\n  return (\r\n    <Center>\r\n      {loading ? (\r\n        <Spinner />\r\n      ) : !data ? (\r\n        <Center>\r\n          <Text>Could not find any recipe...</Text>\r\n        </Center>\r\n      ) : (\r\n        <VStack align=\"flex-start\">\r\n          <Image\r\n            src={data!.imgUrl}\r\n            alt={data!.title}\r\n            width=\"500px\"\r\n            height=\"300px\"\r\n            overflow=\"hidden\"\r\n            objectFit=\"cover\"\r\n          />\r\n          <HStack justify=\"space-between\">\r\n            <Heading>{data!.title}</Heading>\r\n            <HStack>\r\n              <TriangleUpIcon\r\n                color={data!.userVote === 1 ? \"green.500\" : \"inherit\"}\r\n                onClick={() => onVote(1)}\r\n                _hover={{ color: \"green.300\", cursor: \"pointer\" }}\r\n                disabled={data!.userVote === 1}\r\n              />\r\n              <Text>{data!.vote}</Text>\r\n              <TriangleDownIcon\r\n                color={data!.userVote === -1 ? \"red.500\" : \"\"}\r\n                onClick={() => onVote(-1)}\r\n                _hover={{ color: \"red.300\", cursor: \"pointer\" }}\r\n                disabled={data!.userVote === -1}\r\n              />\r\n              {loadingVote && <Spinner />}\r\n            </HStack>\r\n          </HStack>\r\n          <Text fontSize=\"xl\">{data!.shortDescription}</Text>\r\n          <HStack>\r\n            {data!.tags.map((tag, i) => (\r\n              <Badge key={i} borderRadius=\"full\" px=\"2\" colorScheme=\"teal\">\r\n                {tag.name}\r\n              </Badge>\r\n            ))}\r\n          </HStack>\r\n          <Box\r\n            bg=\"gray.300\"\r\n            borderColor=\"gray.500\"\r\n            borderWidth=\"1px\"\r\n            borderRadius=\"lg\"\r\n            overflow=\"hidden\"\r\n            p=\"2\"\r\n          >\r\n            <UnorderedList>\r\n              {data!.ingredients.map((ingredient) => (\r\n                <ListItem key={ingredient.name}>\r\n                  {`${ingredient.name}: ${ingredient.amount} ${ingredient.suffix}`}\r\n                </ListItem>\r\n              ))}\r\n            </UnorderedList>\r\n          </Box>\r\n          <Container pl=\"0\" pr=\"0\">\r\n            <Text>{data!.description}</Text>\r\n          </Container>\r\n        </VStack>\r\n      )}\r\n    </Center>\r\n  );\r\n};\r\n","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Recipes.tsx",["184","185"],"import React, { useContext } from \"react\";\r\nimport { useRecipes } from \"../hooks/useRecipes\";\r\nimport { RecipeCard } from \"./RecipeCard\";\r\nimport {\r\n  Text,\r\n  Spinner,\r\n  SimpleGrid,\r\n  Center,\r\n  VStack,\r\n  Divider,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  StringParam,\r\n  NumberParam,\r\n  useQueryParams,\r\n  ArrayParam,\r\n  withDefault,\r\n} from \"use-query-params\";\r\nimport { stringify } from \"query-string\";\r\nimport { Pagination } from \"./Pagination\";\r\nimport { SearchBar } from \"./SearchBar\";\r\n\r\nexport const Recipes: React.FC = () => {\r\n  const [query, setQuery] = useQueryParams({\r\n    searchText: StringParam,\r\n    pageNumber: NumberParam,\r\n    pageSize: NumberParam,\r\n    tags: withDefault(ArrayParam, []),\r\n  });\r\n\r\n  const { pageNumber, pageSize, tags } = query;\r\n\r\n  const { data, loading, empty } = useRecipes(stringify(query), true);\r\n\r\n  const onPageClick = (num: number) => {\r\n    setQuery({ ...query, pageNumber: num });\r\n  };\r\n\r\n  const onTagClick = (tag: string) => {\r\n    setQuery({ ...query, tags: [...tags, tag] });\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <SearchBar />\r\n      <Divider />\r\n      {loading ? (\r\n        <Spinner />\r\n      ) : empty ? (\r\n        <Text>No recipes</Text>\r\n      ) : (\r\n        <Center>\r\n          <VStack>\r\n            <Text>Total recipes: {data!.totalCount}</Text>\r\n            <SimpleGrid columns={{ sm: 2, md: 3 }} spacing={2}>\r\n              {data!.recipes.map((recipe) => (\r\n                <RecipeCard\r\n                  key={recipe.title}\r\n                  recipe={recipe}\r\n                  onTagClick={onTagClick}\r\n                />\r\n              ))}\r\n            </SimpleGrid>\r\n            <Box p={4}>\r\n              <Pagination\r\n                hasNext={data!.hasNext}\r\n                hasPrevious={data!.hasPrevious}\r\n                totalPage={data!.totalPages}\r\n                onPageClick={onPageClick}\r\n                currentPage={pageNumber}\r\n              />\r\n            </Box>\r\n          </VStack>\r\n        </Center>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n//<div>\r\n//    <h1>Hello, world!</h1>\r\n//    <p>Welcome to your new single-page application, built with:</p>\r\n//    <ul>\r\n//        <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\r\n//        <li><a href='https://facebook.github.io/react/'>React</a> for client-side code</li>\r\n//        <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\r\n//    </ul>\r\n//    <p>To help you get started, we have also set up:</p>\r\n//    <ul>\r\n//        <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\r\n//        <li><strong>Development server integration</strong>. In development mode, the development server from <code>create-react-app</code> runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\r\n//        <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration produces minified, efficiently bundled JavaScript files.</li>\r\n//    </ul>\r\n//    <p>The <code>ClientApp</code> subdirectory is a standard React application based on the <code>create-react-app</code> template. If you open a command prompt in that directory, you can run <code>npm</code> commands such as <code>npm test</code> or <code>npm install</code>.</p>\r\n//</div>\r\n","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Register.tsx",["186"],"﻿import {\r\n  Alert,\r\n  AlertIcon,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  FormControl,\r\n  FormErrorMessage,\r\n  FormLabel,\r\n  Input,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { Field, FieldProps, Form, Formik, FormikProps } from \"formik\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\nimport { useAuth } from \"../contexts/authContext\";\r\n\r\ninterface FormValues {\r\n  username: string;\r\n  password: string;\r\n  repeatPassword: string;\r\n}\r\n\r\nexport default function Register() {\r\n  const [dbError, setDbError] = useState(\"\");\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n  const { login } = useAuth();\r\n\r\n  const SignupSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n      .min(2, \"Too Short!\")\r\n      .max(16, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    password: Yup.string()\r\n      .min(8, \"Too Short!\")\r\n      .max(256, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    repeatPassword: Yup.string().oneOf(\r\n      [Yup.ref(\"password\"), null],\r\n      \"Passwords must match\"\r\n    ),\r\n  });\r\n\r\n  return (\r\n    <Container>\r\n      <Formik\r\n        initialValues={{ username: \"\", password: \"\", repeatPassword: \"\" }}\r\n        onSubmit={async (values, actions) => {\r\n          setDbError(\"\");\r\n          const response = await fetch(\"user/register\", {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify(values),\r\n          });\r\n\r\n          if (response.ok) {\r\n            const data = await response.json();\r\n            if (data) {\r\n              toast({\r\n                title: \"Account Created\",\r\n                description: \"Your account was successfully created\",\r\n                status: \"success\",\r\n                duration: 4000,\r\n                isClosable: true,\r\n              });\r\n              login(data);\r\n              history.push(\"/\");\r\n            }\r\n          } else if (response.status === 400) {\r\n            setDbError(\"Username is not available\");\r\n          } else {\r\n            setDbError(\"Could not create account, please try again later\");\r\n          }\r\n        }}\r\n        validationSchema={SignupSchema}\r\n      >\r\n        {(props: FormikProps<FormValues>) => {\r\n          const { isSubmitting } = props;\r\n          return (\r\n            <Form>\r\n              <Field name=\"username\">\r\n                {({ form, field }: FieldProps) => (\r\n                  <FormControl\r\n                    isInvalid={\r\n                      !!form.errors?.username && !!form.touched?.username\r\n                    }\r\n                  >\r\n                    <FormLabel htmlFor=\"username\">Username</FormLabel>\r\n                    <Input {...field} id=\"username\" placeholder=\"Username\" />\r\n                    <FormErrorMessage>{form.errors.title}</FormErrorMessage>\r\n                  </FormControl>\r\n                )}\r\n              </Field>\r\n              <Field name=\"password\">\r\n                {({ form, field }: FieldProps) => (\r\n                  <FormControl\r\n                    isInvalid={\r\n                      !!form.errors?.password && !!form.touched?.password\r\n                    }\r\n                  >\r\n                    <FormLabel htmlFor=\"password\">Password</FormLabel>\r\n                    <Input\r\n                      {...field}\r\n                      id=\"password\"\r\n                      placeholder=\"Password\"\r\n                      type=\"password\"\r\n                    />\r\n                    <FormErrorMessage>{form.errors.password}</FormErrorMessage>\r\n                  </FormControl>\r\n                )}\r\n              </Field>\r\n              <Field name=\"repeatPassword\">\r\n                {({ form, field }: FieldProps) => (\r\n                  <FormControl\r\n                    isInvalid={\r\n                      !!form.errors?.repeatPassword &&\r\n                      !!form.touched?.repeatPassword\r\n                    }\r\n                  >\r\n                    <FormLabel htmlFor=\"repeatPassword\">\r\n                      Repeat Password\r\n                    </FormLabel>\r\n                    <Input\r\n                      {...field}\r\n                      id=\"repeatPassword\"\r\n                      placeholder=\"Repeat Password\"\r\n                      type=\"password\"\r\n                    />\r\n                    <FormErrorMessage>\r\n                      {form.errors.repeatPassword}\r\n                    </FormErrorMessage>\r\n                  </FormControl>\r\n                )}\r\n              </Field>\r\n              <Button\r\n                mt={4}\r\n                colorScheme=\"teal\"\r\n                isLoading={isSubmitting}\r\n                type=\"submit\"\r\n              >\r\n                Register\r\n              </Button>\r\n              {!!dbError && (\r\n                <Box pt={2}>\r\n                  <Alert status=\"error\">\r\n                    <AlertIcon />\r\n                    {dbError}\r\n                  </Alert>\r\n                </Box>\r\n              )}\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </Container>\r\n  );\r\n}\r\n","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Login.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Account.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\contexts\\authContext.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\routes\\NoUserRoute.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\routes\\ProtectedRoutes.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\NavBar.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useUserRecipes.ts",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useWeekmenu.ts",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useRecipes.ts",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useRecipe.ts",["187"],"﻿import useSWR, { responseInterface } from \"swr\";\r\nimport { Recipe } from \"../types\";\r\nimport { fetch } from \"../utils/refreshFetch\";\r\n\r\nconst fetcher = async (url: string) => {\r\n  const response = await fetch(url);\r\n  console.log(response);\r\n  return response.body;\r\n};\r\n\r\nexport function useRecipe(id: string | null | undefined) {\r\n  const { data, mutate, error } = useSWR(\r\n    id ? [\"/recipe/\" + id] : null,\r\n    fetcher\r\n  ) as responseInterface<Recipe, any>;\r\n\r\n  const loading = !data && !error;\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    data,\r\n    mutate,\r\n  };\r\n}\r\n","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useTags.ts",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\utils\\shoppingListGenerator.ts",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\MiniRecipeCard.tsx",["188"],"﻿import React, { useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Heading,\r\n  HStack,\r\n  Image,\r\n  VStack,\r\n  Text,\r\n  Spinner,\r\n  Divider,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  Center,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { Recipe } from \"../types\";\r\nimport { RepeatIcon } from \"@chakra-ui/icons\";\r\nimport { useHistory } from \"react-router\";\r\n\r\ntype Props = {\r\n  recipe: Recipe;\r\n  onSwap: (id: number) => void;\r\n  openRecipePicker: () => void;\r\n  setCurrentItem: React.Dispatch<React.SetStateAction<number | undefined>>;\r\n  setType: React.Dispatch<\r\n    React.SetStateAction<\"search\" | \"myrecipe\" | undefined>\r\n  >;\r\n  token: string | null | undefined;\r\n};\r\n\r\nexport const MiniRecipeCard: React.FC<Props> = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const onSwap = async () => {\r\n    setLoading(true);\r\n    props.onSwap(props.recipe.id);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Box\r\n        minW=\"8em\"\r\n        maxW=\"sm\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        overflow=\"hidden\"\r\n        _hover={{\r\n          boxShadow: \"rgba(0, 0, 0, 0.22) 0px 19px 43px\",\r\n          cursor: \"pointer\",\r\n          //transform: \"translate3d(0px, -1px, 0px)\"\r\n        }}\r\n      >\r\n        <VStack>\r\n          <Box onClick={() => history.push(`/recipes/${props.recipe.id}`)}>\r\n            <Image\r\n              src={props.recipe.imgUrl}\r\n              alt={props.recipe.title}\r\n              objectFit=\"cover\"\r\n              overflow=\"hidden\"\r\n              height=\"200px\"\r\n              width=\"300px\"\r\n            />\r\n            <Center pt={1}>\r\n              <Heading size=\"sm\">{props.recipe.title}</Heading>\r\n            </Center>\r\n          </Box>\r\n          <Box pb={2}>\r\n            <HStack justify=\"space-betweens\">\r\n              <Text>Score: {props.recipe.vote}</Text>\r\n              <Box h=\"25px\">\r\n                <Divider orientation=\"vertical\" />\r\n              </Box>\r\n              <Menu>\r\n                <Tooltip label=\"Swap recipe\" fontSize=\"md\">\r\n                  <MenuButton\r\n                    as={Button}\r\n                    size=\"xs\"\r\n                    colorScheme=\"pink\"\r\n                    variant=\"outline\"\r\n                  >\r\n                    {loading ? <Spinner size=\"xs\" /> : <RepeatIcon />}\r\n                  </MenuButton>\r\n                </Tooltip>\r\n                <MenuList>\r\n                  <MenuItem onClick={() => onSwap()}>Random Swap</MenuItem>\r\n                  <MenuItem\r\n                    onClick={() => {\r\n                      props.setCurrentItem(props.recipe.id);\r\n                      props.openRecipePicker();\r\n                      props.setType(\"search\");\r\n                    }}\r\n                  >\r\n                    Search\r\n                  </MenuItem>\r\n                  <MenuItem\r\n                    isDisabled={!props.token}\r\n                    onClick={() => {\r\n                      props.setCurrentItem(props.recipe.id);\r\n                      props.openRecipePicker();\r\n                      props.setType(\"myrecipe\");\r\n                    }}\r\n                  >\r\n                    My recipes\r\n                  </MenuItem>\r\n                </MenuList>\r\n              </Menu>\r\n            </HStack>\r\n          </Box>\r\n        </VStack>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\DisplayIngredients.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipePickerModal.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipeCard.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\SearchBar.tsx",["189"],"﻿import {\r\n  Box,\r\n  Button,\r\n  HStack,\r\n  Input,\r\n  Select,\r\n  Tag,\r\n  TagCloseButton,\r\n  TagLabel,\r\n  VStack,\r\n  Wrap,\r\n  WrapItem,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  Field,\r\n  FieldArray,\r\n  FieldArrayRenderProps,\r\n  FieldProps,\r\n  Form,\r\n  Formik,\r\n  FormikProps,\r\n} from \"formik\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useTags } from \"../hooks/useTags\";\r\nimport {\r\n  StringParam,\r\n  NumberParam,\r\n  useQueryParams,\r\n  ArrayParam,\r\n  withDefault,\r\n} from \"use-query-params\";\r\nimport _ from \"lodash\";\r\n\r\ninterface Props {}\r\n\r\ninterface IQueryParams {\r\n  tags: (null | string)[] | never[];\r\n  pageSize: number;\r\n  searchText: string;\r\n}\r\n\r\nconst initialQuery = {\r\n  tags: [],\r\n  pageSize: 10,\r\n  searchText: \"\",\r\n};\r\n\r\nexport const SearchBar: React.FC<Props> = () => {\r\n  const [currentQuery, setCurrentQuery] = useState<IQueryParams>(initialQuery);\r\n\r\n  const { data, loading, empty } = useTags();\r\n\r\n  let boundArrayHelpers: FieldArrayRenderProps;\r\n  const bindArrayHelpers = (arrayHelpers: FieldArrayRenderProps) => {\r\n    boundArrayHelpers = arrayHelpers;\r\n  };\r\n\r\n  const [query, setQuery] = useQueryParams({\r\n    searchText: StringParam,\r\n    pageNumber: NumberParam,\r\n    pageSize: NumberParam,\r\n    tags: withDefault(ArrayParam, []),\r\n  });\r\n\r\n  const options = [2, 5, 10, 20];\r\n\r\n  useEffect(() => {\r\n    if (query) {\r\n      setCurrentQuery({\r\n        tags: query.tags || [],\r\n        pageSize: query.pageSize || 10,\r\n        searchText: query.searchText || \"\",\r\n      });\r\n    }\r\n  }, [query]);\r\n\r\n  const onReset = () => {\r\n    setQuery({ pageNumber: 1, ...initialQuery });\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      enableReinitialize\r\n      initialValues={currentQuery}\r\n      onSubmit={async (values, actions) => {\r\n        setQuery({ pageNumber: 1, ...values });\r\n      }}\r\n    >\r\n      {(props: FormikProps<IQueryParams>) => {\r\n        const { values, isSubmitting } = props;\r\n\r\n        return (\r\n          <Form>\r\n            <Box pb={2}>\r\n              <VStack alignItems=\"flex-end\">\r\n                <Field name=\"searchText\">\r\n                  {({ form, field }: FieldProps) => (\r\n                    <Input\r\n                      {...field}\r\n                      id=\"searchText\"\r\n                      placeholder=\"Search\"\r\n                      variant=\"flushed\"\r\n                    />\r\n                  )}\r\n                </Field>\r\n                <Wrap spacing={2} justify=\"flex-end\">\r\n                  <WrapItem>\r\n                    <FieldArray\r\n                      name=\"tags\"\r\n                      render={(arrayHelpers) => {\r\n                        bindArrayHelpers(arrayHelpers);\r\n                        return (\r\n                          <div>\r\n                            <Box pb={2}>\r\n                              <Select\r\n                                placeholder=\"Select tags\"\r\n                                onChange={(e) => {\r\n                                  arrayHelpers.push(e.target.value);\r\n                                }}\r\n                              >\r\n                                {!loading &&\r\n                                  !empty &&\r\n                                  data!.map((tag) => (\r\n                                    <option key={tag.id} value={tag.name}>\r\n                                      {tag.name}\r\n                                    </option>\r\n                                  ))}\r\n                              </Select>\r\n                            </Box>\r\n                          </div>\r\n                        );\r\n                      }}\r\n                    />\r\n                  </WrapItem>\r\n                  <WrapItem>\r\n                    <Field name=\"pageSize\">\r\n                      {({ form, field }: FieldProps) => (\r\n                        <Box>\r\n                          <Select placeholder=\"Show\" {...field} id=\"pageSize\">\r\n                            {options.map((opt) => (\r\n                              <option key={opt} value={opt}>\r\n                                {opt}\r\n                              </option>\r\n                            ))}\r\n                          </Select>\r\n                        </Box>\r\n                      )}\r\n                    </Field>\r\n                  </WrapItem>\r\n                  <WrapItem>\r\n                    <HStack>\r\n                      <Box>\r\n                        <Button onClick={() => onReset()}>Reset</Button>\r\n                      </Box>\r\n                      <Box>\r\n                        <Button\r\n                          isLoading={isSubmitting}\r\n                          type=\"submit\"\r\n                          variant={\r\n                            values.pageSize !== query.pageSize ||\r\n                            !_.isEqual(values.tags, query.tags) ||\r\n                            values.searchText !== query.searchText\r\n                              ? \"solid\"\r\n                              : \"outline\"\r\n                          }\r\n                          colorScheme=\"pink\"\r\n                        >\r\n                          Search\r\n                        </Button>\r\n                      </Box>\r\n                    </HStack>\r\n                  </WrapItem>\r\n                </Wrap>\r\n              </VStack>\r\n              <HStack spacing={4}>\r\n                {values.tags &&\r\n                  values.tags.length > 0 &&\r\n                  (values!.tags as string[]).map((tag: string, i: number) => (\r\n                    <Tag\r\n                      key={i}\r\n                      size=\"lg\"\r\n                      borderRadius=\"full\"\r\n                      variant=\"solid\"\r\n                      colorScheme=\"green\"\r\n                    >\r\n                      <TagLabel>{tag}</TagLabel>\r\n                      <TagCloseButton\r\n                        onClick={() => boundArrayHelpers.remove(i)}\r\n                      />\r\n                    </Tag>\r\n                  ))}\r\n              </HStack>\r\n            </Box>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Pagination.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuLinks.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\Logo.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuToggle.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\NavBarContainer.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipeListModal.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuItem.tsx",[],["190","191"],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\MiniRecipeSkeleton.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\WeekMenuOptions.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useHasChanged.ts",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\ConfirmModal.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\utils\\refreshFetch.ts",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\utils\\storageActions.ts",[],{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","severity":1,"message":"197","line":1,"column":1,"nodeType":"198","messageId":"199","fix":"200"},{"ruleId":"196","severity":1,"message":"197","line":1,"column":1,"nodeType":"198","messageId":"199","fix":"201"},{"ruleId":"196","severity":1,"message":"197","line":1,"column":1,"nodeType":"198","messageId":"199","fix":"202"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":17,"nodeType":"205","messageId":"206","endLine":1,"endColumn":27},{"ruleId":"203","severity":1,"message":"207","line":32,"column":23,"nodeType":"205","messageId":"206","endLine":32,"endColumn":31},{"ruleId":"196","severity":1,"message":"197","line":1,"column":1,"nodeType":"198","messageId":"199","fix":"208"},{"ruleId":"196","severity":1,"message":"197","line":1,"column":1,"nodeType":"198","messageId":"199","fix":"209"},{"ruleId":"196","severity":1,"message":"197","line":1,"column":1,"nodeType":"198","messageId":"199","fix":"210"},{"ruleId":"196","severity":1,"message":"197","line":1,"column":1,"nodeType":"198","messageId":"199","fix":"211"},{"ruleId":"192","replacedBy":"212"},{"ruleId":"194","replacedBy":"213"},"no-native-reassign",["214"],"no-negated-in-lhs",["215"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"216","text":"217"},{"range":"218","text":"217"},{"range":"219","text":"217"},"@typescript-eslint/no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","'pageSize' is assigned a value but never used.",{"range":"220","text":"217"},{"range":"221","text":"217"},{"range":"222","text":"217"},{"range":"223","text":"217"},["214"],["215"],"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]