[{"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\App.tsx":"1","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\index.tsx":"2","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\Contexts.tsx":"3","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\reportWebVitals.ts":"4","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Layout.js":"5","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\UserRecipes.tsx":"6","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Home.tsx":"7","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\DisplayRecipe.tsx":"8","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\CreateRecipe.tsx":"9","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Recipes.tsx":"10","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\routes\\ProtectedRoutes.tsx":"11","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\NavBar.tsx":"12","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useUserRecipes.ts":"13","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useWeekmenu.ts":"14","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useTags.ts":"15","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useRecipe.ts":"16","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\utils\\shoppingListGenerator.ts":"17","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useRecipes.ts":"18","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\MiniRecipeCard.tsx":"19","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\DisplayIngredients.tsx":"20","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipePickerModal.tsx":"21","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipeCard.tsx":"22","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Pagination.tsx":"23","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\SearchBar.tsx":"24","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuLinks.tsx":"25","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\Logo.tsx":"26","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuToggle.tsx":"27","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\NavBarContainer.tsx":"28","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipeListModal.tsx":"29","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuItem.tsx":"30","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Register.tsx":"31","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Login.tsx":"32","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\contexts\\authContext.tsx":"33","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Account.tsx":"34","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\routes\\NoUserRoute.tsx":"35"},{"size":1259,"mtime":1611303607947,"results":"36","hashOfConfig":"37"},{"size":771,"mtime":1611260600678,"results":"38","hashOfConfig":"37"},{"size":490,"mtime":1611298828125,"results":"39","hashOfConfig":"37"},{"size":425,"mtime":1611126747107,"results":"40","hashOfConfig":"37"},{"size":370,"mtime":1611252308212,"results":"41","hashOfConfig":"37"},{"size":3258,"mtime":1611298828125,"results":"42","hashOfConfig":"37"},{"size":5338,"mtime":1611237922363,"results":"43","hashOfConfig":"37"},{"size":3602,"mtime":1611304099981,"results":"44","hashOfConfig":"37"},{"size":13798,"mtime":1611298828124,"results":"45","hashOfConfig":"37"},{"size":3722,"mtime":1611254772555,"results":"46","hashOfConfig":"37"},{"size":888,"mtime":1611298828125,"results":"47","hashOfConfig":"37"},{"size":601,"mtime":1611299231971,"results":"48","hashOfConfig":"37"},{"size":797,"mtime":1611298828143,"results":"49","hashOfConfig":"37"},{"size":4418,"mtime":1611299310528,"results":"50","hashOfConfig":"37"},{"size":525,"mtime":1611298828125,"results":"51","hashOfConfig":"37"},{"size":671,"mtime":1611304099981,"results":"52","hashOfConfig":"37"},{"size":1690,"mtime":1611299359510,"results":"53","hashOfConfig":"37"},{"size":883,"mtime":1611298828125,"results":"54","hashOfConfig":"37"},{"size":3387,"mtime":1611304099981,"results":"55","hashOfConfig":"37"},{"size":1221,"mtime":1611298828124,"results":"56","hashOfConfig":"37"},{"size":3639,"mtime":1611298828125,"results":"57","hashOfConfig":"37"},{"size":2063,"mtime":1611298828125,"results":"58","hashOfConfig":"37"},{"size":1512,"mtime":1611298828125,"results":"59","hashOfConfig":"37"},{"size":7079,"mtime":1611298828125,"results":"60","hashOfConfig":"37"},{"size":2919,"mtime":1611304099981,"results":"61","hashOfConfig":"37"},{"size":406,"mtime":1611301423046,"results":"62","hashOfConfig":"37"},{"size":445,"mtime":1611298828125,"results":"63","hashOfConfig":"37"},{"size":585,"mtime":1611300241236,"results":"64","hashOfConfig":"37"},{"size":1258,"mtime":1611298828125,"results":"65","hashOfConfig":"37"},{"size":442,"mtime":1611304099980,"results":"66","hashOfConfig":"37"},{"size":4564,"mtime":1611304099982,"results":"67","hashOfConfig":"37"},{"size":3559,"mtime":1611299213653,"results":"68","hashOfConfig":"37"},{"size":2385,"mtime":1611253617269,"results":"69","hashOfConfig":"37"},{"size":728,"mtime":1611303457342,"results":"70","hashOfConfig":"37"},{"size":878,"mtime":1611303596327,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"fxq1k9",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"86","usedDeprecatedRules":"74"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"94","usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"99","usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"104","usedDeprecatedRules":"74"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"109","usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"112","usedDeprecatedRules":"74"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"117","usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"123","usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"126","usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"129","usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"132","usedDeprecatedRules":"74"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"135","usedDeprecatedRules":"74"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"138","usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"143","usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"148","usedDeprecatedRules":"74"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"151","usedDeprecatedRules":"74"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"154","usedDeprecatedRules":"74"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\App.tsx",[],["163","164"],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\index.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\Contexts.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Layout.js",[],["165","166"],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\UserRecipes.tsx",["167"],"﻿import {\r\n  Spinner,\r\n  Text,\r\n  Box,\r\n  Heading,\r\n  Button,\r\n  useToast,\r\n  Center,\r\n  VStack,\r\n  Table,\r\n  Thead,\r\n  Tr,\r\n  Th,\r\n  Tbody,\r\n  Td,\r\n  WrapItem,\r\n  Wrap,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useContext } from \"react\";\r\nimport { useUserRecipes } from \"../hooks/useUserRecipes\";\r\nimport { useHistory } from \"react-router\";\r\nimport { AuthContext } from \"../contexts/authContext\";\r\n\r\nexport const UserRecipes = () => {\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const { data, loading, mutate, empty } = useUserRecipes(user?.token);\r\n\r\n  const onDelete = async (id: number, title: string) => {\r\n    const response = await fetch(\"recipe/\" + id, {\r\n      method: \"DELETE\",\r\n      headers: !user?.token ? {} : { Authorization: `Bearer ${user.token}` },\r\n      body: null,\r\n    });\r\n    if (response.ok) {\r\n      mutate((recipes) => {\r\n        if (!recipes) {\r\n          return;\r\n        }\r\n        const filteredRecipes = recipes!.filter((recipe) => recipe.id !== id);\r\n        return [...filteredRecipes];\r\n      });\r\n      toast({\r\n        title: \"Recipe Deleted.\",\r\n        description: `Successfully deleted ${title}`,\r\n        status: \"success\",\r\n        duration: 4000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Center>\r\n      {loading ? (\r\n        <Spinner />\r\n      ) : empty ? (\r\n        <VStack spacing={4}>\r\n          <Heading color=\"grey.500\">You have no recipes..</Heading>\r\n          <Center>\r\n            <Button\r\n              color=\"pink.500\"\r\n              onClick={() => history.push(\"/create-recipes\")}\r\n            >\r\n              Create One?\r\n            </Button>\r\n          </Center>\r\n        </VStack>\r\n      ) : (\r\n        <Table variant=\"simple\">\r\n          <Thead>\r\n            <Tr>\r\n              <Th>Title</Th>\r\n              <Th>Short description</Th>\r\n              <Th>Actions</Th>\r\n            </Tr>\r\n          </Thead>\r\n          <Tbody>\r\n            {data!.map((recipe) => (\r\n              <Tr key={recipe.id}>\r\n                <Td>\r\n                  <Text fontWeight=\"bold\">{recipe.title}</Text>\r\n                </Td>\r\n                <Td>\r\n                  <Box maxW={[70, 150]}>\r\n                    <Text isTruncated>{recipe.shortDescription}</Text>\r\n                  </Box>\r\n                </Td>\r\n                <Td>\r\n                  <Wrap>\r\n                    <WrapItem>\r\n                      <Button\r\n                        colorScheme=\"yellow\"\r\n                        variant=\"solid\"\r\n                        onClick={() => history.push(`edit/${recipe.id}`)}\r\n                      >\r\n                        Edit\r\n                      </Button>\r\n                    </WrapItem>\r\n                    <WrapItem>\r\n                      <Button\r\n                        colorScheme=\"pink\"\r\n                        variant=\"solid\"\r\n                        onClick={() => onDelete(recipe.id, recipe.title)}\r\n                      >\r\n                        Delete\r\n                      </Button>\r\n                    </WrapItem>\r\n                  </Wrap>\r\n                </Td>\r\n              </Tr>\r\n            ))}\r\n          </Tbody>\r\n        </Table>\r\n      )}\r\n    </Center>\r\n  );\r\n};\r\n","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Home.tsx",["168"],"import React, { useContext, useState } from \"react\";\r\nimport {\r\n  Text,\r\n  SimpleGrid,\r\n  Center,\r\n  VStack,\r\n  Button,\r\n  useDisclosure,\r\n  Box,\r\n  SkeletonCircle,\r\n  SkeletonText,\r\n} from \"@chakra-ui/react\";\r\nimport { useWeekmenu } from \"../hooks/useWeekmenu\";\r\nimport { generateShoppingList } from \"../utils/shoppingListGenerator\";\r\nimport { MiniRecipeCard } from \"./MiniRecipeCard\";\r\nimport { DisplayIngredients } from \"./DisplayIngredients\";\r\nimport { useUserRecipes } from \"../hooks/useUserRecipes\";\r\nimport { RecipePickerModal } from \"./RecipePickerModal\";\r\nimport { useRecipes } from \"../hooks/useRecipes\";\r\nimport { stringify } from \"query-string\";\r\nimport { AuthContext } from \"../contexts/authContext\";\r\n\r\ninterface Query {\r\n  searchText: string | undefined;\r\n  pageSize: number;\r\n}\r\n\r\nexport const Home: React.FC = () => {\r\n  const [getShoppingList, setGetShoppingList] = useState(false);\r\n  const [currentItem, setCurrentItem] = useState<number | undefined>();\r\n  const [type, setType] = useState<\"search\" | \"myrecipe\" | undefined>();\r\n  const [query, setQuery] = useState<Query>({\r\n    searchText: undefined,\r\n    pageSize: 10,\r\n  });\r\n\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const { loading, data, onSwapAll, onSwap, onIdSwap } = useWeekmenu(\r\n    5,\r\n    user?.token\r\n  );\r\n\r\n  const {\r\n    data: myRecipes,\r\n    loading: myRecipesLoading,\r\n    error: myRecipeError,\r\n  } = useUserRecipes(isOpen && type === \"myrecipe\" ? user?.token : null);\r\n\r\n  const {\r\n    data: searchRecipes,\r\n    loading: searchRecipesLoading,\r\n    error: searchRecipeError,\r\n  } = useRecipes(user?.token, stringify(query), isOpen && type === \"search\");\r\n\r\n  const pickRecipes = async (newId: number) => {\r\n    if (currentItem) {\r\n      await onIdSwap(currentItem, newId);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <RecipePickerModal\r\n        myRecipes={myRecipes}\r\n        searchRecipes={searchRecipes}\r\n        loading={type === \"myrecipe\" ? myRecipesLoading : searchRecipesLoading}\r\n        onIdSwap={pickRecipes}\r\n        error={type === \"myrecipe\" ? myRecipeError : searchRecipeError}\r\n        type={type}\r\n        isOpen={isOpen}\r\n        onClose={onClose}\r\n        setQuery={setQuery}\r\n        query={query}\r\n      />\r\n      <VStack>\r\n        {loading ? (\r\n          <SimpleGrid columns={{ sm: 3, md: 5 }} spacing={2}>\r\n            {[...Array(5)].map((_, i) => (\r\n              <Box padding=\"10\" boxShadow=\"lg\" bg=\"white\" key={i} maxW=\"sm\">\r\n                <SkeletonCircle size=\"24\" />\r\n                <SkeletonText mt=\"4\" noOfLines={2} spacing=\"6\" />\r\n              </Box>\r\n            ))}\r\n          </SimpleGrid>\r\n        ) : !data ? (\r\n          <Text>No data</Text>\r\n        ) : (\r\n          <Center>\r\n            <SimpleGrid columns={{ sm: 3, md: 5 }} spacing={2}>\r\n              {data.map((recipe) => (\r\n                <MiniRecipeCard\r\n                  recipe={recipe}\r\n                  key={recipe.id}\r\n                  onSwap={onSwap}\r\n                  openRecipePicker={onOpen}\r\n                  setCurrentItem={setCurrentItem}\r\n                  token={user?.token}\r\n                  setType={setType}\r\n                />\r\n              ))}\r\n            </SimpleGrid>\r\n          </Center>\r\n        )}\r\n        <Button onClick={() => onSwapAll()}>Swap all</Button>\r\n        <Button\r\n          onClick={() => setGetShoppingList((getList) => !getList)}\r\n          disabled={!data}\r\n        >\r\n          {getShoppingList ? \"Hide\" : \"Generate shoppinglist\"}\r\n        </Button>\r\n        {!!data && getShoppingList && (\r\n          <Center>\r\n            <DisplayIngredients ingredients={generateShoppingList(data!)} />\r\n          </Center>\r\n        )}\r\n      </VStack>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\n//<div>\r\n//    <h1>Hello, world!</h1>\r\n//    <p>Welcome to your new single-page application, built with:</p>\r\n//    <ul>\r\n//        <li><a href='https://get.asp.net/'>ASP.NET Core</a> and <a href='https://msdn.microsoft.com/en-us/library/67ef8sbd.aspx'>C#</a> for cross-platform server-side code</li>\r\n//        <li><a href='https://facebook.github.io/react/'>React</a> for client-side code</li>\r\n//        <li><a href='http://getbootstrap.com/'>Bootstrap</a> for layout and styling</li>\r\n//    </ul>\r\n//    <p>To help you get started, we have also set up:</p>\r\n//    <ul>\r\n//        <li><strong>Client-side navigation</strong>. For example, click <em>Counter</em> then <em>Back</em> to return here.</li>\r\n//        <li><strong>Development server integration</strong>. In development mode, the development server from <code>create-react-app</code> runs in the background automatically, so your client-side resources are dynamically built on demand and the page refreshes when you modify any file.</li>\r\n//        <li><strong>Efficient production builds</strong>. In production mode, development-time features are disabled, and your <code>dotnet publish</code> configuration produces minified, efficiently bundled JavaScript files.</li>\r\n//    </ul>\r\n//    <p>The <code>ClientApp</code> subdirectory is a standard React application based on the <code>create-react-app</code> template. If you open a command prompt in that directory, you can run <code>npm</code> commands such as <code>npm test</code> or <code>npm install</code>.</p>\r\n//</div>\r\n","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\DisplayRecipe.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\CreateRecipe.tsx",["169"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  FormErrorMessage,\r\n  FormLabel,\r\n  Input,\r\n  Select,\r\n  HStack,\r\n  Textarea,\r\n  Tag,\r\n  TagLabel,\r\n  TagCloseButton,\r\n  Box,\r\n  Stack,\r\n  Grid,\r\n  GridItem,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport {\r\n  Field,\r\n  FieldArray,\r\n  FieldProps,\r\n  Form,\r\n  Formik,\r\n  FormikProps,\r\n} from \"formik\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport * as Yup from \"yup\";\r\nimport { useRecipe } from \"../hooks/useRecipe\";\r\nimport { useTags } from \"../hooks/useTags\";\r\nimport { useUserRecipes } from \"../hooks/useUserRecipes\";\r\nimport { Ingredients, Recipe } from \"../types\";\r\nimport { AuthContext } from \"../contexts/authContext\";\r\n\r\ninterface FormValues {\r\n  title: string;\r\n  shortDescription: string;\r\n  description: string;\r\n  tags: string[];\r\n  ingredients: Ingredients[];\r\n  imgUrl: string;\r\n}\r\n\r\nconst suffix = [\"pcs\", \"kg\", \"g\", \"ts\", \"L\", \"dL\"];\r\n\r\nexport const CreateRecipe = () => {\r\n  const [initialValues, setInitialValues] = useState<FormValues>({\r\n    title: \"\",\r\n    shortDescription: \"\",\r\n    description: \"\",\r\n    tags: [],\r\n    ingredients: [],\r\n    imgUrl: \"\",\r\n  });\r\n  const { recipeId } = useParams<{ recipeId: string | undefined }>();\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n  const { user } = useContext(AuthContext);\r\n\r\n  const { data, empty, loading } = useTags();\r\n  const { data: recipeData, loading: recipeLoading } = useRecipe(\r\n    recipeId,\r\n    user?.token\r\n  );\r\n  const { mutate } = useUserRecipes(user?.token);\r\n\r\n  useEffect(() => {\r\n    if (!recipeLoading && recipeData) {\r\n      setInitialValues({\r\n        title: recipeData.title,\r\n        shortDescription: recipeData.shortDescription,\r\n        description: recipeData.description,\r\n        tags: Object.values(recipeData.tags).map((tag) => tag.name),\r\n        ingredients: recipeData.ingredients,\r\n        imgUrl: recipeData.imgUrl,\r\n      });\r\n    }\r\n  }, [recipeLoading, recipeData]);\r\n\r\n  const SignupSchema = Yup.object().shape({\r\n    title: Yup.string()\r\n      .min(2, \"Too Short!\")\r\n      .max(50, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    shortDescription: Yup.string()\r\n      .min(2, \"Too Short!\")\r\n      .max(120, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    description: Yup.string()\r\n      .min(2, \"Too Short!\")\r\n      .max(500, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    imgUrl: Yup.string().max(200, \"Too Long!\"),\r\n  });\r\n\r\n  return (\r\n    <Formik\r\n      enableReinitialize\r\n      initialValues={initialValues}\r\n      onSubmit={async (values, actions) => {\r\n        console.log(values);\r\n        const response = await fetch(\r\n          recipeId ? \"recipe/\" + recipeId : \"recipe\",\r\n          {\r\n            method: recipeId ? \"PUT\" : \"POST\",\r\n            headers: !user?.token\r\n              ? { \"Content-Type\": \"application/json\" }\r\n              : {\r\n                  \"Content-Type\": \"application/json\",\r\n                  Authorization: `Bearer ${user?.token}`,\r\n                },\r\n            body: JSON.stringify(values),\r\n          }\r\n        );\r\n\r\n        if (response.ok) {\r\n          toast({\r\n            title: recipeId ? \"Recipe updated.\" : \"Recipe created\",\r\n            description: recipeId\r\n              ? \"Your recipe was successfully updated\"\r\n              : \"Your recipe was successfully created\",\r\n            status: \"success\",\r\n            duration: 4000,\r\n            isClosable: true,\r\n          });\r\n\r\n          const recipeResponse = (await response.json()) as Recipe;\r\n\r\n          mutate((userRecipes) => {\r\n            if (!userRecipes) {\r\n              return;\r\n            }\r\n            if (recipeId) {\r\n              const filteredRecipes = userRecipes!.filter(\r\n                (recipe) => recipe.id.toString() !== recipeId\r\n              );\r\n              return [...filteredRecipes, recipeResponse];\r\n            } else {\r\n              return [...userRecipes, recipeResponse];\r\n            }\r\n          });\r\n\r\n          history.push(\"/my-recipes\");\r\n        } else {\r\n          toast({\r\n            title: \"Error\",\r\n            description: recipeId\r\n              ? \"Your recipe was not updated\"\r\n              : \"Your recipe was not created\",\r\n            status: \"error\",\r\n            duration: 4000,\r\n            isClosable: true,\r\n          });\r\n        }\r\n      }}\r\n      validationSchema={SignupSchema}\r\n    >\r\n      {(props: FormikProps<FormValues>) => {\r\n        const { values, isSubmitting } = props;\r\n        return (\r\n          <Form>\r\n            <Field name=\"title\">\r\n              {({ form, field }: FieldProps) => (\r\n                <FormControl\r\n                  isInvalid={!!form.errors?.title && !!form.touched?.title}\r\n                >\r\n                  <FormLabel htmlFor=\"title\">Title</FormLabel>\r\n                  <Input {...field} id=\"title\" placeholder=\"title\" />\r\n                  <FormErrorMessage>{form.errors.title}</FormErrorMessage>\r\n                </FormControl>\r\n              )}\r\n            </Field>\r\n            <Field name=\"shortDescription\">\r\n              {({ form, field }: FieldProps) => (\r\n                <FormControl\r\n                  isInvalid={\r\n                    !!form.errors?.shortDescription &&\r\n                    !!form.touched?.shortDescription\r\n                  }\r\n                >\r\n                  <FormLabel htmlFor=\"shortDescription\">\r\n                    Short Description\r\n                  </FormLabel>\r\n                  <Textarea\r\n                    {...field}\r\n                    id=\"shortDescription\"\r\n                    placeholder=\"Short Description\"\r\n                  />\r\n                  <FormErrorMessage>\r\n                    {form.errors.shortDescription}\r\n                  </FormErrorMessage>\r\n                </FormControl>\r\n              )}\r\n            </Field>\r\n            <Field name=\"description\">\r\n              {({ form, field }: FieldProps) => (\r\n                <FormControl\r\n                  isInvalid={\r\n                    !!form.errors?.description && !!form.touched?.description\r\n                  }\r\n                >\r\n                  <FormLabel htmlFor=\"description\">Description</FormLabel>\r\n                  <Textarea\r\n                    {...field}\r\n                    id=\"description\"\r\n                    placeholder=\"Description\"\r\n                  />\r\n                  <FormErrorMessage>{form.errors.description}</FormErrorMessage>\r\n                </FormControl>\r\n              )}\r\n            </Field>\r\n            <Field name=\"imgUrl\">\r\n              {({ form, field }: FieldProps) => (\r\n                <FormControl\r\n                  isInvalid={!!form.errors?.imgUrl && !!form.touched?.imgUrl}\r\n                >\r\n                  <FormLabel htmlFor=\"imgUrl\">ImageUrl</FormLabel>\r\n                  <Input {...field} id=\"imgUrl\" placeholder=\"imgUrl\" />\r\n                  <FormErrorMessage>{form.errors.imgUrl}</FormErrorMessage>\r\n                </FormControl>\r\n              )}\r\n            </Field>\r\n            <FormLabel htmlFor={`tags`} pt={1}>\r\n              Tags\r\n            </FormLabel>\r\n            <FieldArray\r\n              name=\"tags\"\r\n              render={(arrayHelpers) => (\r\n                <div>\r\n                  <Box pb={2}>\r\n                    <Select\r\n                      placeholder=\"Select tags\"\r\n                      onChange={(e) => arrayHelpers.push(e.target.value)}\r\n                    >\r\n                      {!loading &&\r\n                        !empty &&\r\n                        data!.map((tag) => (\r\n                          <option key={tag.id} value={tag.name}>\r\n                            {tag.name}\r\n                          </option>\r\n                        ))}\r\n                    </Select>\r\n                  </Box>\r\n                  <HStack spacing={4}>\r\n                    {values.tags &&\r\n                      values.tags.length > 0 &&\r\n                      values.tags.map((tag, index) => (\r\n                        <Tag\r\n                          key={index}\r\n                          size=\"lg\"\r\n                          borderRadius=\"full\"\r\n                          variant=\"solid\"\r\n                          colorScheme=\"green\"\r\n                        >\r\n                          <TagLabel>{tag}</TagLabel>\r\n                          <TagCloseButton\r\n                            onClick={() => arrayHelpers.remove(index)}\r\n                          />\r\n                        </Tag>\r\n                      ))}\r\n                  </HStack>\r\n                </div>\r\n              )}\r\n            />\r\n            <FormLabel htmlFor={`ingredients`} pt={1}>\r\n              Ingredients\r\n            </FormLabel>\r\n            <FieldArray\r\n              name=\"ingredients\"\r\n              render={(arrayHelpers) => (\r\n                <div>\r\n                  <Stack spacing={4}>\r\n                    {values.ingredients &&\r\n                      values.ingredients.length > 0 &&\r\n                      values.ingredients.map((ingredients, index) => (\r\n                        <Grid\r\n                          key={index}\r\n                          templateColumns=\"repeat(6, 1fr)\"\r\n                          gap={2}\r\n                        >\r\n                          <GridItem colSpan={3}>\r\n                            <Field name={`ingredients[${index}].name`}>\r\n                              {({ form, field }: FieldProps) => {\r\n                                return (\r\n                                  <FormControl\r\n                                    isInvalid={\r\n                                      !!form.errors?.ingredients &&\r\n                                      !!form.touched?.ingredients\r\n                                    }\r\n                                  >\r\n                                    <Input\r\n                                      {...field}\r\n                                      id={`ingredients[${index}].name`}\r\n                                      placeholder=\"Ingredient\"\r\n                                    />\r\n                                    <FormErrorMessage>\r\n                                      {form.errors.name}\r\n                                    </FormErrorMessage>\r\n                                  </FormControl>\r\n                                );\r\n                              }}\r\n                            </Field>\r\n                          </GridItem>\r\n                          <GridItem colSpan={1}>\r\n                            <Field name={`ingredients[${index}].amount`}>\r\n                              {({ form, field }: FieldProps) => (\r\n                                <FormControl\r\n                                  isInvalid={\r\n                                    !!form.errors?.ingredients &&\r\n                                    !!form.touched?.ingredients\r\n                                  }\r\n                                >\r\n                                  <Input\r\n                                    {...field}\r\n                                    id={`ingredients[${index}].amount`}\r\n                                    placeholder=\"Amount\"\r\n                                  />\r\n                                  <FormErrorMessage>\r\n                                    {form.errors.name}\r\n                                  </FormErrorMessage>\r\n                                </FormControl>\r\n                              )}\r\n                            </Field>\r\n                          </GridItem>\r\n                          <GridItem colSpan={1}>\r\n                            <Field name={`ingredients[${index}].suffix`}>\r\n                              {({ form, field }: FieldProps) => (\r\n                                <FormControl\r\n                                  isInvalid={\r\n                                    !!form.errors?.ingredients &&\r\n                                    !!form.touched?.ingredients\r\n                                  }\r\n                                >\r\n                                  <Select\r\n                                    id={`ingredients[${index}].suffix`}\r\n                                    placeholder=\"Suffix\"\r\n                                    {...field}\r\n                                  >\r\n                                    {suffix.map((s) => (\r\n                                      <option key={s} value={s}>\r\n                                        {s}\r\n                                      </option>\r\n                                    ))}\r\n                                  </Select>\r\n                                  <FormErrorMessage>\r\n                                    {form.errors.name}\r\n                                  </FormErrorMessage>\r\n                                </FormControl>\r\n                              )}\r\n                            </Field>\r\n                          </GridItem>\r\n                          <GridItem colSpan={1}>\r\n                            <Button onClick={() => arrayHelpers.remove(index)}>\r\n                              -\r\n                            </Button>\r\n                          </GridItem>\r\n                        </Grid>\r\n                      ))}\r\n                    <Button\r\n                      onClick={() =>\r\n                        arrayHelpers.push({ name: \"\", amount: 1, suffix: \"\" })\r\n                      }\r\n                    >\r\n                      +\r\n                    </Button>\r\n                  </Stack>\r\n                </div>\r\n              )}\r\n            />\r\n            <Button\r\n              mt={4}\r\n              colorScheme=\"teal\"\r\n              isLoading={isSubmitting}\r\n              type=\"submit\"\r\n            >\r\n              {recipeId ? \"Update\" : \"Submit\"}\r\n            </Button>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Recipes.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\routes\\ProtectedRoutes.tsx",["170"],"﻿import React, { useContext } from \"react\";\r\nimport { Route, Redirect, RouteComponentProps } from \"react-router-dom\";\r\nimport { AuthContext } from \"../contexts/authContext\";\r\n\r\ninterface Props {\r\n  component: React.ComponentType<RouteComponentProps<any>>;\r\n  path: string;\r\n}\r\n\r\nconst ProtectedRoute: React.FC<Props> = ({ component: Component, ...rest }) => {\r\n  const { isLoggedIn } = useContext(AuthContext);\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) => {\r\n        if (isLoggedIn) {\r\n          return <Component {...rest} {...props} />;\r\n        } else {\r\n          return (\r\n            <Redirect\r\n              to={{\r\n                pathname: \"/login\",\r\n                state: {\r\n                  from: props.location,\r\n                },\r\n              }}\r\n            />\r\n          );\r\n        }\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ProtectedRoute;\r\n","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\NavBar.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useUserRecipes.ts",["171"],"﻿import useSWR, { responseInterface } from \"swr\";\r\nimport { Recipe } from \"../types\";\r\n\r\nconst fetcher = async (url: string, token: string) => {\r\n    const response = await fetch(url, {\r\n        headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\r\n    });\r\n\r\n    if (response.status === 401) {\r\n        throw new Error(\"Unauthorized\")\r\n    }\r\n\r\n    return await response.json()\r\n}\r\n\r\nexport function useUserRecipes(token: string | null | undefined) {\r\n    const { data, mutate, error } = useSWR(token ? ['recipe/user', token] : null, fetcher) as responseInterface<Recipe[], Error>\r\n\r\n    const loading = !data && !error;\r\n\r\n    const empty = !data || (!!data && data.length === 0)\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        data,\r\n        mutate,\r\n        empty\r\n    };\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useWeekmenu.ts",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useTags.ts",["172"],"﻿import useSWR, { responseInterface } from \"swr\";\r\nimport { Tags } from \"../types\";\r\n\r\nconst fetcher = async (url: string) => {\r\n    const response = await fetch(url);\r\n    return await response.json()\r\n}\r\n\r\nexport function useTags() {\r\n    const { data, mutate, error } = useSWR('tag', fetcher) as responseInterface<Tags[], any>\r\n\r\n    const loading = !data && !error;\r\n\r\n    const empty = !!data && data.length === 0\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        data,\r\n        mutate,\r\n        empty\r\n    };\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useRecipe.ts",["173"],"﻿import useSWR, { responseInterface } from \"swr\";\r\nimport { Recipe } from \"../types\";\r\n\r\nconst fetcher = async (url: string, token: string) => {\r\n  const response = await fetch(url, {\r\n    headers: !token ? {} : { Authorization: `Bearer ${token}` },\r\n  });\r\n  return await response.json();\r\n};\r\n\r\nexport function useRecipe(\r\n  id: string | null | undefined,\r\n  token: string | null | undefined\r\n) {\r\n  const { data, mutate, error } = useSWR(\r\n    id ? [\"/recipe/\" + id, token] : null,\r\n    fetcher\r\n  ) as responseInterface<Recipe, any>;\r\n\r\n  console.log(id);\r\n\r\n  const loading = !data && !error;\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    data,\r\n    mutate,\r\n  };\r\n}\r\n","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\utils\\shoppingListGenerator.ts",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\hooks\\useRecipes.ts",["174"],"﻿import useSWR, { responseInterface } from \"swr\";\r\nimport { RecipePaginated } from \"../types\";\r\n\r\nconst fetcher = async (url: string, token: string) => {\r\n    const response = await fetch(url, {\r\n        headers: !token ? {} : { 'Authorization': `Bearer ${token}` }\r\n    });\r\n    return await response.json()\r\n}\r\n\r\nexport function useRecipes(token: string | null | undefined, query: string | null | undefined, shouldFetch: boolean) {\r\n    let url = 'recipe'\r\n    if (query) {\r\n        url = url + \"/?\" + query\r\n    }\r\n\r\n    const { data, mutate, error } = useSWR(shouldFetch ? [url, token] : null, fetcher) as responseInterface<RecipePaginated, any>\r\n\r\n    const loading = !data && !error;\r\n\r\n    const empty = !data || (!!data && !data.recipes) || (data.recipes.length === 0)\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        data,\r\n        mutate,\r\n        empty\r\n    };\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\MiniRecipeCard.tsx",["175"],"﻿import React, { useState } from \"react\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  Heading,\r\n  HStack,\r\n  Image,\r\n  VStack,\r\n  Text,\r\n  Spinner,\r\n  Divider,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  MenuItem,\r\n  Center,\r\n  Tooltip,\r\n} from \"@chakra-ui/react\";\r\n\r\nimport { Recipe } from \"../types\";\r\nimport { RepeatIcon } from \"@chakra-ui/icons\";\r\nimport { useHistory } from \"react-router\";\r\n\r\ntype Props = {\r\n  recipe: Recipe;\r\n  onSwap: (id: number) => void;\r\n  openRecipePicker: () => void;\r\n  setCurrentItem: React.Dispatch<React.SetStateAction<number | undefined>>;\r\n  setType: React.Dispatch<\r\n    React.SetStateAction<\"search\" | \"myrecipe\" | undefined>\r\n  >;\r\n  token: string | null | undefined;\r\n};\r\n\r\nexport const MiniRecipeCard: React.FC<Props> = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const history = useHistory();\r\n\r\n  const onSwap = async () => {\r\n    setLoading(true);\r\n    await props.onSwap(props.recipe.id);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Box\r\n        minW=\"8em\"\r\n        maxW=\"sm\"\r\n        borderWidth=\"1px\"\r\n        borderRadius=\"lg\"\r\n        overflow=\"hidden\"\r\n        _hover={{\r\n          boxShadow: \"rgba(0, 0, 0, 0.22) 0px 19px 43px\",\r\n          cursor: \"pointer\",\r\n          //transform: \"translate3d(0px, -1px, 0px)\"\r\n        }}\r\n      >\r\n        <VStack>\r\n          <Box onClick={() => history.push(`/recipes/${props.recipe.id}`)}>\r\n            <Image\r\n              src={props.recipe.imgUrl}\r\n              alt={props.recipe.title}\r\n              objectFit=\"cover\"\r\n              overflow=\"hidden\"\r\n              height=\"200px\"\r\n              width=\"300px\"\r\n            />\r\n            <Center pt={1}>\r\n              <Heading size=\"sm\">{props.recipe.title}</Heading>\r\n            </Center>\r\n          </Box>\r\n          <Box pb={2}>\r\n            <HStack justify=\"space-betweens\">\r\n              <Text>Likes: {props.recipe.vote}</Text>\r\n              <Box h=\"25px\">\r\n                <Divider orientation=\"vertical\" />\r\n              </Box>\r\n              <Menu>\r\n                <Tooltip label=\"Swap recipe\" fontSize=\"md\">\r\n                  <MenuButton\r\n                    as={Button}\r\n                    size=\"xs\"\r\n                    colorScheme=\"pink\"\r\n                    variant=\"outline\"\r\n                  >\r\n                    {loading ? <Spinner size=\"xs\" /> : <RepeatIcon />}\r\n                  </MenuButton>\r\n                </Tooltip>\r\n                <MenuList>\r\n                  <MenuItem onClick={() => onSwap()}>Random Swap</MenuItem>\r\n                  <MenuItem\r\n                    onClick={() => {\r\n                      props.setCurrentItem(props.recipe.id);\r\n                      props.openRecipePicker();\r\n                      props.setType(\"search\");\r\n                    }}\r\n                  >\r\n                    Search\r\n                  </MenuItem>\r\n                  <MenuItem\r\n                    isDisabled={!props.token}\r\n                    onClick={() => {\r\n                      props.setCurrentItem(props.recipe.id);\r\n                      props.openRecipePicker();\r\n                      props.setType(\"myrecipe\");\r\n                    }}\r\n                  >\r\n                    My recipes\r\n                  </MenuItem>\r\n                </MenuList>\r\n              </Menu>\r\n            </HStack>\r\n          </Box>\r\n        </VStack>\r\n      </Box>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\DisplayIngredients.tsx",["176"],"﻿import { Box, Table, Tbody, Td, Th, Thead, Tr } from '@chakra-ui/react';\r\nimport React from 'react';\r\nimport { Ingredients } from '../types';\r\n\r\ninterface Props {\r\n    ingredients: Ingredients[]\r\n}\r\n\r\nexport const DisplayIngredients: React.FC<Props> = (props) => {\r\n    return (\r\n        <Box bg=\"pink.50\" borderColor=\"pink.500\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\" p=\"2\">\r\n            <Table size=\"sm\" colorScheme=\"pink\">\r\n                <Thead>\r\n                    <Tr>\r\n                        <Th>Ingredient</Th>\r\n                        <Th isNumeric>Amount</Th>\r\n                        <Th>Suffix</Th>\r\n                    </Tr>\r\n                </Thead>\r\n                <Tbody>\r\n                    {props.ingredients.map(ingredient => (\r\n                        < Tr key={`${ingredient.name}-${ingredient.amount}-${ingredient.suffix}`}>\r\n                            <Td>{ingredient.name}</Td>\r\n                            <Td isNumeric>{Math.round((ingredient.amount + Number.EPSILON) * 100) / 100}</Td>\r\n                            <Td>{ingredient.suffix}</Td>\r\n                        </Tr>\r\n                    ))}\r\n                </Tbody>\r\n            </Table>\r\n        </Box>\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipePickerModal.tsx",["177"],"﻿import { Button, Center, Modal, ModalBody, ModalCloseButton, ModalContent, ModalFooter, ModalHeader, ModalOverlay, Spinner, Text, VStack, HStack, Input } from '@chakra-ui/react';\r\nimport React, { SetStateAction, useState } from 'react';\r\nimport { Recipe, RecipePaginated } from '../types';\r\nimport { RecipeListModal } from './RecipeListModal';\r\n\r\ninterface Query {\r\n    searchText: string | undefined\r\n    pageSize: number\r\n}\r\n\r\ninterface Props {\r\n    myRecipes: Recipe[] | undefined\r\n    searchRecipes: RecipePaginated | undefined\r\n    query: Query\r\n    setQuery: React.Dispatch<SetStateAction<Query>>\r\n    error: Error | undefined\r\n    isOpen: boolean\r\n    onClose: () => void\r\n    loading: boolean\r\n    onIdSwap: (newId: number) => void\r\n    type: \"search\" | \"myrecipe\" | undefined\r\n}\r\n\r\nexport const RecipePickerModal: React.FC<Props> = (props) => {\r\n    const [loading, setLoading] = useState<boolean>(false)\r\n    const [searchText, setSearchText] = useState<string>(\"\")\r\n\r\n    const onIdSwap = async (id: number) => {\r\n        setLoading(true)\r\n        await props.onIdSwap(id)\r\n        props.onClose()\r\n        setLoading(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal\r\n                isOpen={props.isOpen}\r\n                onClose={props.onClose}\r\n            >\r\n                <ModalOverlay />\r\n                <ModalContent>\r\n                    <ModalHeader>Pick a recipe</ModalHeader>\r\n                    <ModalCloseButton />\r\n                    <ModalBody>\r\n                        <VStack>\r\n                            {props.type === \"search\" &&\r\n                                <HStack>\r\n                                    <Input onChange={(e) => setSearchText(e.target.value)} value={searchText} />\r\n                                    <Button\r\n                                        onClick={() => props.setQuery({ pageSize: 10, searchText })}\r\n                                    >\r\n                                        Search\r\n                                    </Button>\r\n                                </HStack>\r\n                            }\r\n                            {props.searchRecipes && <Text> {`Showing ${props.searchRecipes.recipes.length + 1 || 0}  recipes`}</Text>}\r\n                            {props.myRecipes && <Text> {`Showing ${props.myRecipes.length + 1 || 0}  recipes`}</Text>}\r\n                            {props.loading ?\r\n                                <Center>\r\n                                    <Spinner />\r\n                                </Center> :\r\n                                    props.error ||\r\n                                !props.type ||\r\n                                !(props.myRecipes || props.searchRecipes?.recipes) ?\r\n                                    <Text> Could not retrive recipes </Text> :\r\n                                        <RecipeListModal\r\n                                            loading={loading}\r\n                                            onIdSwap={onIdSwap}\r\n                                            recipes={props.type === \"myrecipe\" ? props.myRecipes! : props.searchRecipes!.recipes}\r\n                                        />\r\n                            }\r\n                            {loading && <Center pt={2}><Spinner /></Center>}\r\n                        </VStack>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button colorScheme=\"yellow\" mr={3} onClick={props.onClose}>\r\n                            Close\r\n                        </Button>\r\n                    </ModalFooter>\r\n                </ModalContent>\r\n            </Modal>\r\n        </>\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipeCard.tsx",["178"],"﻿import React from 'react';\r\nimport { Badge, Box, HStack, Image } from '@chakra-ui/react';\r\nimport { Recipe } from '../types';\r\nimport { useHistory } from 'react-router';\r\n\r\ntype Props = {\r\n    recipe: Recipe;\r\n    onTagClick?: (tag: string) => void\r\n};\r\n\r\nexport const RecipeCard: React.FC<Props> = (props) => {\r\n    const history = useHistory()\r\n    return (\r\n        <Box maxW=\"sm\" borderWidth=\"1px\" borderRadius=\"lg\" overflow=\"hidden\">\r\n\r\n            <Image src={props.recipe.imgUrl} alt={props.recipe.title} objectFit=\"cover\" overflow=\"hidden\" height=\"200px\" width=\"300px\" />\r\n            <Box p=\"6\">\r\n                <Box\r\n                    mt=\"1\"\r\n                    fontWeight=\"semibold\"\r\n                    as=\"h4\"\r\n                    lineHeight=\"tight\"\r\n                    isTruncated\r\n                    onClick={() => history.push(\"/recipes/\" + props.recipe.id)}\r\n                    _hover={{ cursor: \"pointer\", color: \"pink.500\" }}\r\n                >\r\n                    {props.recipe.title}\r\n                </Box>\r\n\r\n                <Box>\r\n                    {props.recipe.shortDescription}\r\n                </Box>\r\n                <HStack>\r\n                    {props.recipe.tags.map((tag, i) => (\r\n                        <Badge\r\n                            key={tag.name}\r\n                            borderRadius=\"full\"\r\n                            px=\"2\"\r\n                            colorScheme=\"teal\"\r\n                            onClick={() => { if (props.onTagClick) { props.onTagClick(tag.name) } }}\r\n                            _hover={{ cursor: \"pointer\", backgroundColor: \"blue.300\" }}\r\n                        >\r\n                            {tag.name}\r\n                        </Badge>\r\n                    ))}\r\n                </HStack>\r\n\r\n                <Box d=\"flex\" mt=\"2\" alignItems=\"center\">\r\n\r\n                    <Box as=\"span\" ml=\"2\" color=\"gray.600\" fontSize=\"sm\">\r\n                        {props.recipe.vote} score\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Pagination.tsx",["179"],"﻿import { Button, HStack } from '@chakra-ui/react';\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n    totalPage: number;\r\n    onPageClick: (tag: number) => void\r\n    hasNext: boolean;\r\n    hasPrevious: boolean;\r\n    currentPage: number | null | undefined;\r\n}\r\n\r\nexport const Pagination: React.FC<Props> = (props) => {\r\n    return (\r\n        <HStack>\r\n            <Button\r\n                disabled={!props.hasPrevious}\r\n                onClick={() => {\r\n                    if (props.currentPage) {\r\n                        props.onPageClick(props.currentPage - 1)\r\n                    }\r\n\r\n                }}>\r\n                    Previous\r\n                </Button>\r\n\r\n            {[...Array.from({ length: props.totalPage }, (_, i) => i + 1)].map(num => (\r\n                <Button\r\n                    disabled={props?.currentPage === num}\r\n                    key={num}\r\n                    onClick={() => props.onPageClick(num)}\r\n                    colorScheme={props?.currentPage === num ? \"pink\" : undefined}\r\n                    variant={props?.currentPage === num ? \"solid\" : undefined}>\r\n                    {num}\r\n                </Button>\r\n            ))}\r\n\r\n            <Button\r\n                disabled={!props.hasNext}\r\n                onClick={() => {\r\n                    if (props.currentPage) {\r\n                        props.onPageClick(props.currentPage + 1)\r\n                    }\r\n                }}>\r\n                    Next\r\n                </Button>\r\n \r\n        </HStack>\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\SearchBar.tsx",["180"],"﻿import { Box, Button, HStack, Input, Select, Tag, TagCloseButton, TagLabel, VStack, Wrap, WrapItem } from '@chakra-ui/react';\r\nimport { Field, FieldArray, FieldArrayRenderProps, FieldProps, Form, Formik, FormikProps } from 'formik';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useTags } from '../hooks/useTags';\r\nimport {\r\n    StringParam,\r\n    NumberParam,\r\n    useQueryParams,\r\n    ArrayParam,\r\n    withDefault,\r\n} from 'use-query-params';\r\n\r\ninterface Props {\r\n}\r\n\r\ninterface IQueryParams {\r\n    tags: (null | string)[] | never[];\r\n    pageSize: number;\r\n    searchText: string;\r\n}\r\n\r\nconst initialQuery = {\r\n    tags: [],\r\n    pageSize: 10,\r\n    searchText: \"\"\r\n}\r\n\r\nexport const SearchBar: React.FC<Props> = () => {\r\n    const [currentQuery, setCurrentQuery] = useState<IQueryParams>(initialQuery)\r\n\r\n    const { data, loading, empty } = useTags()\r\n\r\n    let boundArrayHelpers: FieldArrayRenderProps\r\n    const bindArrayHelpers = (arrayHelpers: FieldArrayRenderProps) => {\r\n        boundArrayHelpers = arrayHelpers\r\n    }\r\n\r\n    const [query, setQuery] = useQueryParams({\r\n        searchText: StringParam,\r\n        pageNumber: NumberParam,\r\n        pageSize: NumberParam,\r\n        tags: withDefault(ArrayParam, []),\r\n    });\r\n\r\n    const options = [2, 5, 10, 20]\r\n\r\n    useEffect(() => {\r\n        if (query) {\r\n            setCurrentQuery({\r\n                tags: query.tags || [],\r\n                pageSize: query.pageSize || 10,\r\n                searchText: query.searchText || \"\"\r\n            })\r\n        }\r\n    }, [query])\r\n\r\n    const onReset = () => {\r\n        setQuery({ pageNumber: 1, ...initialQuery })\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={currentQuery}\r\n            onSubmit={async (values, actions) => {\r\n                setQuery({ pageNumber: 1, ...values })\r\n            }}\r\n        >\r\n            {(props: FormikProps<IQueryParams>) => {\r\n                const {\r\n                    values,\r\n                    isSubmitting,\r\n                } = props\r\n                return (\r\n                    <Form>\r\n                        <Box pb={2}>\r\n                            <VStack alignItems=\"flex-end\">\r\n                                <Field name=\"searchText\">\r\n                                    {({ form, field }: FieldProps) => (\r\n                                        <Input {...field} id=\"searchText\" placeholder=\"Search\" variant=\"flushed\" />\r\n                                    )}\r\n                                </Field>\r\n                                <Wrap spacing={2} justify=\"flex-end\">\r\n                                    <WrapItem>\r\n                                        <FieldArray name=\"tags\"\r\n                                            render={arrayHelpers => {\r\n                                                bindArrayHelpers(arrayHelpers)\r\n                                                return (\r\n                                                    <div>\r\n                                                        <Box pb={2}>\r\n                                                            <Select placeholder=\"Select tags\" onChange={(e) => {\r\n                                                                arrayHelpers.push(e.target.value)\r\n                                                            }}>\r\n                                                                {!loading && !empty && data!.map(tag => (\r\n                                                                    <option key={tag.id} value={tag.name}>{tag.name}</option>\r\n                                                                ))\r\n                                                                }\r\n                                                            </Select>\r\n                                                        </Box>\r\n                                                    </div>\r\n\r\n                                                )\r\n                                            }}\r\n                                        />\r\n                                    </WrapItem>\r\n                                    <WrapItem>\r\n                                        <Field name=\"pageSize\">\r\n                                            {({ form, field }: FieldProps) => (\r\n                                                <Box>\r\n                                                    <Select placeholder=\"Show\" {...field} id=\"pageSize\" >\r\n                                                        {options.map(opt => (\r\n                                                            <option key={opt} value={opt}>{opt}</option>\r\n                                                        ))}\r\n                                                    </Select>\r\n                                                </Box>\r\n                                            )}\r\n                                        </Field>\r\n                                    </WrapItem>\r\n                                    <WrapItem>\r\n                                        <HStack>\r\n                                            <Box>\r\n                                                <Button onClick={() => (onReset())}>Reset</Button>\r\n                                            </Box>\r\n                                            <Box>\r\n                                                <Button\r\n                                                    isLoading={isSubmitting}\r\n                                                    type=\"submit\"\r\n                                                    colorScheme=\"pink\"\r\n                                                >\r\n                                                    Search\r\n                                                </Button>\r\n                                            </Box>\r\n                                        </HStack>\r\n                                    </WrapItem>\r\n                                </Wrap>\r\n                            </VStack>\r\n                            <HStack spacing={4}>\r\n                                {values.tags && values.tags.length > 0 && (\r\n                                    (values!.tags as (string)[]).map((tag: string, i: number) => (\r\n                                        <Tag\r\n                                            key={i}\r\n                                            size=\"lg\"\r\n                                            borderRadius=\"full\"\r\n                                            variant=\"solid\"\r\n                                            colorScheme=\"green\"\r\n                                        >\r\n\r\n                                            <TagLabel>{tag}</TagLabel>\r\n                                            <TagCloseButton onClick={() => boundArrayHelpers.remove(i)} />\r\n\r\n                                        </Tag>\r\n                                    ))\r\n                                )}\r\n                            </HStack>\r\n                        </Box>\r\n                    </Form>\r\n                )\r\n            }}\r\n        </Formik>\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuLinks.tsx",["181"],"﻿import {\r\n  Box,\r\n  Menu,\r\n  MenuButton,\r\n  MenuList,\r\n  Stack,\r\n  MenuItem as MenuItemChakra,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nimport React from \"react\";\r\nimport { MenuItem } from \"./MenuItem\";\r\nimport { useMediaQuery } from \"@chakra-ui/react\";\r\nimport { ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useAuth } from \"../../contexts/authContext\";\r\n\r\ninterface Props {\r\n  isOpen: boolean;\r\n}\r\n\r\nexport const MenuLinks: React.FC<Props> = ({ isOpen }) => {\r\n  const [isLargerThan420] = useMediaQuery(\"(min-width: 30em)\");\r\n\r\n  const { logout, isLoggedIn } = useAuth();\r\n\r\n  const allUsers = [\r\n    { path: \"/\", name: \"Home\" },\r\n    { path: \"/recipes\", name: \"Recipes\" },\r\n  ];\r\n\r\n  const signedIn = [\r\n    { path: \"/create-recipes\", name: \"Create Recipes\" },\r\n    { path: \"/my-recipes\", name: \"My Recipes\" },\r\n    { path: \"/account\", name: \"Account\" },\r\n  ];\r\n\r\n  const signedOut = [\r\n    { path: \"/register\", name: \"Register\" },\r\n    { path: \"/login\", name: \"Login\", isLast: true },\r\n  ];\r\n\r\n  const buttonMenu = (\r\n    <Menu>\r\n      <MenuButton\r\n        as={Button}\r\n        rightIcon={<ChevronDownIcon />}\r\n        fontWeight=\"normal\"\r\n        colorScheme=\"pink\"\r\n      >\r\n        Profile\r\n      </MenuButton>\r\n      <MenuList>\r\n        {signedIn.map((route) => (\r\n          <MenuItemChakra as={Link} to={route.path} key={route.path}>\r\n            {route.name}\r\n          </MenuItemChakra>\r\n        ))}\r\n        <MenuItemChakra onClick={() => logout()}>Logout</MenuItemChakra>\r\n      </MenuList>\r\n    </Menu>\r\n  );\r\n\r\n  const listMenu = (\r\n    <React.Fragment>\r\n      {signedIn.map((route) => (\r\n        <MenuItem key={route.path} to={route.path}>\r\n          {route.name}\r\n        </MenuItem>\r\n      ))}\r\n      <Button\r\n        size=\"small\"\r\n        colorScheme=\"pink\"\r\n        onClick={() => logout()}\r\n        fontWeight=\"normal\"\r\n        _hover={{ backgroundColor: \"transparent\", textDecoration: \"underline\" }}\r\n      >\r\n        Logout\r\n      </Button>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const signedOutList = (\r\n    <React.Fragment>\r\n      {signedOut.map((route) => (\r\n        <MenuItem key={route.path} to={route.path} isLast={route.isLast}>\r\n          {route.name}\r\n        </MenuItem>\r\n      ))}\r\n    </React.Fragment>\r\n  );\r\n\r\n  return (\r\n    <Box\r\n      display={{ base: isOpen ? \"block\" : \"none\", sm: \"block\" }}\r\n      flexBasis={{ base: \"100%\", sm: \"auto\" }}\r\n    >\r\n      <Stack\r\n        spacing={8}\r\n        align=\"center\"\r\n        justify={[\"center\", \"flex-end\", \"flex-end\", \"flex-end\"]}\r\n        direction={[\"column\", \"row\", \"row\", \"row\"]}\r\n        pt={[4, 0, 0, 0]}\r\n      >\r\n        {allUsers.map((route) => (\r\n          <MenuItem key={route.path} to={route.path}>\r\n            {route.name}\r\n          </MenuItem>\r\n        ))}\r\n        {!isLoggedIn ? signedOutList : isLargerThan420 ? buttonMenu : listMenu}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\Logo.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuToggle.tsx",["182"],"﻿import React from \"react\"\r\nimport { Box } from \"@chakra-ui/react\"\r\nimport { HamburgerIcon, CloseIcon } from '@chakra-ui/icons'\r\n\r\ninterface Props {\r\n    isOpen: boolean\r\n    toggle: () => void\r\n}\r\n\r\nexport const MenuToggle: React.FC<Props> = ({ toggle, isOpen }) => {\r\n    return (\r\n        <Box display={{ base: \"block\", sm: \"none\" }} onClick={() => toggle()}>\r\n            {isOpen ? <CloseIcon /> : <HamburgerIcon />}\r\n        </Box>\r\n    )\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\NavBarContainer.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\RecipeListModal.tsx",["183"],"﻿import { Button, Heading, Table, Tbody, Td, Th, Thead, Tr } from '@chakra-ui/react';\r\nimport { Recipe } from '../types';\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n    recipes: Recipe[]\r\n    loading: boolean\r\n    onIdSwap: (newId: number) => void\r\n}\r\n\r\nexport const RecipeListModal: React.FC<Props> = (props) => {\r\n    return (\r\n        <Table variant=\"simple\">\r\n            <Thead>\r\n                <Tr>\r\n                    <Th>Title</Th>\r\n                    <Th>Action</Th>\r\n                </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n                {props.recipes.map(recipe => (\r\n                    <Tr key={recipe.id}>\r\n                        <Td><Heading size=\"xs\">{recipe.title}</Heading></Td>\r\n                        <Td>\r\n                            <Button\r\n                                size=\"sm\"\r\n                                isDisabled={props.loading}\r\n                                disabled={props.loading}\r\n                                onClick={() => props.onIdSwap(recipe.id)}\r\n                            >\r\n                                Add\r\n                            </Button>\r\n                        </Td>\r\n                    </Tr>\r\n                ))}\r\n            </Tbody>\r\n        </Table>\r\n    );\r\n}","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\navbar\\MenuItem.tsx",["184"],"﻿import React from \"react\";\r\nimport { Text, Link } from \"@chakra-ui/react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\n\r\ninterface Props {\r\n  isLast?: boolean;\r\n  to: string;\r\n}\r\n\r\nexport const MenuItem: React.FC<Props> = ({\r\n  children,\r\n  isLast,\r\n  to = \"/\",\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <Link as={RouterLink} to={to}>\r\n      <Text display=\"block\" {...rest}>\r\n        {children}\r\n      </Text>\r\n    </Link>\r\n  );\r\n};\r\n","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Register.tsx",["185"],"﻿import {\r\n  Button,\r\n  FormControl,\r\n  FormErrorMessage,\r\n  FormLabel,\r\n  Input,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { Field, FieldProps, Form, Formik, FormikProps } from \"formik\";\r\nimport React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport * as Yup from \"yup\";\r\nimport { useAuth } from \"../contexts/authContext\";\r\n\r\ninterface FormValues {\r\n  username: string;\r\n  password: string;\r\n  repeatPassword: string;\r\n}\r\n\r\nexport default function Register() {\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n  const { login } = useAuth();\r\n\r\n  const SignupSchema = Yup.object().shape({\r\n    username: Yup.string()\r\n      .min(2, \"Too Short!\")\r\n      .max(16, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    password: Yup.string()\r\n      .min(8, \"Too Short!\")\r\n      .max(256, \"Too Long!\")\r\n      .required(\"Required\"),\r\n    repeatPassword: Yup.string().oneOf(\r\n      [Yup.ref(\"password\"), null],\r\n      \"Passwords must match\"\r\n    ),\r\n  });\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ username: \"\", password: \"\", repeatPassword: \"\" }}\r\n      onSubmit={async (values, actions) => {\r\n        console.log(values);\r\n        const response = await fetch(\"user/register\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(values),\r\n        });\r\n\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          if (data) {\r\n            toast({\r\n              title: \"Account Created\",\r\n              description: \"Your account was successfully created\",\r\n              status: \"success\",\r\n              duration: 4000,\r\n              isClosable: true,\r\n            });\r\n            login(data);\r\n            history.push(\"/\");\r\n          }\r\n        } else {\r\n          toast({\r\n            title: \"Error\",\r\n            description: \"Could not create the account, please try again later\",\r\n            status: \"error\",\r\n            duration: 4000,\r\n            isClosable: true,\r\n          });\r\n        }\r\n      }}\r\n      validationSchema={SignupSchema}\r\n    >\r\n      {(props: FormikProps<FormValues>) => {\r\n        const { isSubmitting } = props;\r\n        return (\r\n          <Form>\r\n            <Field name=\"username\">\r\n              {({ form, field }: FieldProps) => (\r\n                <FormControl\r\n                  isInvalid={\r\n                    !!form.errors?.username && !!form.touched?.username\r\n                  }\r\n                >\r\n                  <FormLabel htmlFor=\"username\">Username</FormLabel>\r\n                  <Input {...field} id=\"username\" placeholder=\"Username\" />\r\n                  <FormErrorMessage>{form.errors.title}</FormErrorMessage>\r\n                </FormControl>\r\n              )}\r\n            </Field>\r\n            <Field name=\"password\">\r\n              {({ form, field }: FieldProps) => (\r\n                <FormControl\r\n                  isInvalid={\r\n                    !!form.errors?.password && !!form.touched?.password\r\n                  }\r\n                >\r\n                  <FormLabel htmlFor=\"password\">Password</FormLabel>\r\n                  <Input\r\n                    {...field}\r\n                    id=\"password\"\r\n                    placeholder=\"Password\"\r\n                    type=\"password\"\r\n                  />\r\n                  <FormErrorMessage>{form.errors.password}</FormErrorMessage>\r\n                </FormControl>\r\n              )}\r\n            </Field>\r\n            <Field name=\"repeatPassword\">\r\n              {({ form, field }: FieldProps) => (\r\n                <FormControl\r\n                  isInvalid={\r\n                    !!form.errors?.repeatPassword &&\r\n                    !!form.touched?.repeatPassword\r\n                  }\r\n                >\r\n                  <FormLabel htmlFor=\"repeatPassword\">\r\n                    Repeat Password\r\n                  </FormLabel>\r\n                  <Input\r\n                    {...field}\r\n                    id=\"repeatPassword\"\r\n                    placeholder=\"Repeat Password\"\r\n                    type=\"password\"\r\n                  />\r\n                  <FormErrorMessage>\r\n                    {form.errors.repeatPassword}\r\n                  </FormErrorMessage>\r\n                </FormControl>\r\n              )}\r\n            </Field>\r\n            <Button\r\n              mt={4}\r\n              colorScheme=\"teal\"\r\n              isLoading={isSubmitting}\r\n              type=\"submit\"\r\n            >\r\n              Register\r\n            </Button>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n}\r\n","C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Login.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\contexts\\authContext.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\components\\Account.tsx",[],"C:\\Users\\odden\\source\\repos\\WeekMenuSA\\client-app\\src\\routes\\NoUserRoute.tsx",[],{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"194"},{"ruleId":"195","severity":1,"message":"196","line":13,"column":10,"nodeType":"197","messageId":"198","endLine":13,"endColumn":17},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"199"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"200"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"201"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"202"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"203"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"204"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"205"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"206"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"207"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"208"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"209"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"210"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"211"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"212"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"213"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"214"},{"ruleId":"190","severity":1,"message":"191","line":1,"column":1,"nodeType":"192","messageId":"193","fix":"215"},"no-native-reassign",["216"],"no-negated-in-lhs",["217"],"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"218","text":"219"},"@typescript-eslint/no-unused-vars","'useAuth' is defined but never used.","Identifier","unusedVar",{"range":"220","text":"219"},{"range":"221","text":"219"},{"range":"222","text":"219"},{"range":"223","text":"219"},{"range":"224","text":"219"},{"range":"225","text":"219"},{"range":"226","text":"219"},{"range":"227","text":"219"},{"range":"228","text":"219"},{"range":"229","text":"219"},{"range":"230","text":"219"},{"range":"231","text":"219"},{"range":"232","text":"219"},{"range":"233","text":"219"},{"range":"234","text":"219"},{"range":"235","text":"219"},{"range":"236","text":"219"},"no-global-assign","no-unsafe-negation",[-1,0],"",[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0],[-1,0]]